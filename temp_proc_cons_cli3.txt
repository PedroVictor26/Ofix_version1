        const clientes = await prisma.cliente.findMany({
            where: {
                OR: [
                    { nomeCompleto: { contains: termoBusca, mode: 'insensitive' } },
                    { telefone: { contains: termoBusca } },
                    { cpfCnpj: { contains: termoBusca } }
                ]
            },
            include: { veiculos: true }
        });

        if (clientes.length === 0) {
            return {
                success: false,
                response: `‚ùå Nenhum cliente encontrado para "${termoBusca}".\n\nTente informar nome completo, telefone ou CPF.`,
                tipo: 'erro'
            };
        }

        // Armazenar os clientes no cache para sele√ß√£o futura, se tivermos usuario_id
        if (usuario_id) {
            contextoSelecaoClientes.set(usuario_id, {
                clientes: clientes,
                timestamp: Date.now()
            });
        }

        // Montar resposta com lista de clientes
        let resposta = `üë§ **Clientes encontrados:**\n\n`;
        clientes.forEach((c, idx) => {
            resposta += `${idx + 1}. **${c.nomeCompleto}**\n`;
            resposta += `   ‚Ä¢ Telefone: ${c.telefone || 'N√£o informado'}\n`;
            resposta += `   ‚Ä¢ CPF/CNPJ: ${c.cpfCnpj || 'N√£o informado'}\n`;
            if (c.veiculos && c.veiculos.length > 0) {
                resposta += `   ‚Ä¢ Ve√≠culos: ${c.veiculos.map(v => v.modelo).join(', ')}\n`;
            }
            resposta += '\n';
        });

        resposta += `\nüí° Digite o n√∫mero do cliente para selecionar ou "agendar" para iniciar um agendamento.`;

        return {
            success: true,
            response: resposta,
            tipo: 'consulta_cliente',
            metadata: {
                clientes: clientes,
                options: clientes.map((c, idx) => ({
                    id: c.id,
                    label: c.nomeCompleto,
                    subtitle: c.telefone || 'Sem telefone',
                    details: c.veiculos && c.veiculos.length > 0 ? [`üöó ${c.veiculos.map(v => `${v.marca} ${v.modelo}`).join(', ')}`] : [],
                    value: (idx + 1).toString() // Valor que ser√° enviado ao selecionar por n√∫mero
                })),
                selectionTitle: 'Clientes encontrados:'
            },
            contexto_ativo: 'buscar_cliente'  // Sinaliza que estamos em modo de busca de cliente
        };
    } catch (error) {
        return {
            success: false,
            response: '‚ùå Erro ao consultar cliente',
            tipo: 'erro'
        };
    }
}
