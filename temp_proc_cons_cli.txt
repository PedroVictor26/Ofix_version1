    try {
        // Verificar se a mensagem √© um n√∫mero e se estamos em um contexto de sele√ß√£o de cliente
        // ou se a mensagem √© composta apenas por um n√∫mero (o que indica sele√ß√£o)
        const mensagemTrimmed = mensagem.trim();
        if (mensagemTrimmed.match(/^\d+$/)) {  // Verifica se a mensagem cont√©m apenas d√≠gitos
            const numeroDigitado = parseInt(mensagemTrimmed);
            
            // Verificar se h√° clientes armazenados no cache para este usu√°rio
            if (usuario_id && contextoSelecaoClientes.has(usuario_id)) {
                const dadosCache = contextoSelecaoClientes.get(usuario_id);
                
                // Verificar se o cache ainda √© v√°lido (n√£o expirou)
                if (Date.now() - dadosCache.timestamp < TEMPO_EXPIRACAO) {
                    const clientes = dadosCache.clientes;
                    
                    // O usu√°rio digitou um n√∫mero em resposta √† lista de clientes
                    if (numeroDigitado >= 1 && numeroDigitado <= clientes.length) {
                        const clienteSelecionado = clientes[numeroDigitado - 1];
                        
                        // Limpar o cache ap√≥s sele√ß√£o bem-sucedida
                        contextoSelecaoClientes.delete(usuario_id);
                        
                        return {
                            success: true,
                            response: `‚úÖ **Cliente selecionado:** ${clienteSelecionado.nomeCompleto}\n\nTelefone: ${clienteSelecionado.telefone || 'N√£o informado'}\nCPF/CNPJ: ${clienteSelecionado.cpfCnpj || 'N√£o informado'}\nVe√≠culos: ${clienteSelecionado.veiculos && clienteSelecionado.veiculos.length > 0 ? clienteSelecionado.veiculos.map(v => v.modelo).join(', ') : 'Nenhum ve√≠culo cadastrado'}\n\nüí° O que deseja fazer com este cliente?\n‚Ä¢ \"agendar\" - Agendar servi√ßo\n‚Ä¢ \"editar\" - Editar dados\n‚Ä¢ \"hist√≥rico\" - Ver hist√≥rico de servi√ßos`,
                            tipo: 'cliente_selecionado',
                            cliente: clienteSelecionado,
                            cliente_id: clienteSelecionado.id
                        };
                    } else {
                        // N√∫mero fora do intervalo
                        return {
                            success: false,
                            response: `‚ùå **N√∫mero inv√°lido:** ${numeroDigitado}\n\nPor favor, escolha um n√∫mero entre 1 e ${clientes.length}.`,
                            tipo: 'erro'
                        };
                    }
                } else {
                    // Cache expirado, remover entrada
                    contextoSelecaoClientes.delete(usuario_id);
                }
            }
        }

        // Extrair nome, telefone ou cpf da mensagem
        const padraoNome = /(?:nome|cliente|dados do cliente|consultar cliente|buscar cliente|telefone|cpf|cnpj):?\s*([A-Z√Ä-√úa-z√†-√º0-9\s-]+)/i;
