import { useState, useEffect, useRef } from 'react';

/**
 * Hook para notifica√ß√µes sonoras do sistema OFIX
 * Reproduz sons para alertas importantes como:
 * - Estoque baixo
 * - Novas mensagens
 * - Status cr√≠ticos de servi√ßos
 * - Notifica√ß√µes do sistema
 */
export const useAudioNotifications = () => {
  const [isEnabled, setIsEnabled] = useState(true);
  const [volume, setVolume] = useState(0.7);
  const audioContextRef = useRef(null);

  // Configura√ß√µes de sons
  const soundConfig = {
    // Alerta de estoque baixo - tom grave e cont√≠nuo
    lowStock: {
      frequency: 200,
      duration: 800,
      volume: 0.6,
      type: 'sawtooth'
    },
    // Nova mensagem - tom suave e agrad√°vel
    newMessage: {
      frequency: 440,
      duration: 300,
      volume: 0.5,
      type: 'sine'
    },
    // Status cr√≠tico - tom urgente
    criticalAlert: {
      frequency: 880,
      duration: 500,
      volume: 0.8,
      type: 'square'
    },
    // Notifica√ß√£o geral - tom neutro
    notification: {
      frequency: 523,
      duration: 250,
      volume: 0.4,
      type: 'triangle'
    },
    // Sucesso - tom ascendente alegre
    success: {
      frequencies: [261, 329, 392],
      duration: 150,
      volume: 0.6,
      type: 'sine'
    },
    // Erro - tom descendente
    error: {
      frequencies: [440, 349, 261],
      duration: 200,
      volume: 0.7,
      type: 'sawtooth'
    }
  };

  // Inicializar contexto de √°udio
  useEffect(() => {
    const initAudioContext = async () => {
      try {
        if (!audioContextRef.current) {
          audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
        }
      } catch (error) {
        console.warn('üîä AudioContext n√£o suportado:', error);
      }
    };

    initAudioContext();
    
    return () => {
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        audioContextRef.current.close();
      }
    };
  }, []);

  // Fun√ß√£o para criar oscilador
  const createOscillator = (frequency, duration, volume, type = 'sine') => {
    if (!audioContextRef.current || !isEnabled) return;

    try {
      const oscillator = audioContextRef.current.createOscillator();
      const gainNode = audioContextRef.current.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContextRef.current.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = type;

      // Envelope de volume suave para evitar cliques
      const now = audioContextRef.current.currentTime;
      gainNode.gain.setValueAtTime(0, now);
      gainNode.gain.linearRampToValueAtTime(volume * this.volume || volume * 0.7, now + 0.01);
      gainNode.gain.exponentialRampToValueAtTime(0.01, now + duration / 1000);

      oscillator.start(now);
      oscillator.stop(now + duration / 1000);

      return oscillator;
    } catch (error) {
      console.warn('üîä Erro ao criar oscilador:', error);
    }
  };

  // Fun√ß√£o principal para reproduzir sons
  const playSound = (soundType, options = {}) => {
    if (!isEnabled || !audioContextRef.current) return;

    console.log(`üîä Reproduzindo som: ${soundType}`);

    const config = { ...soundConfig[soundType], ...options };
    
    if (!config) {
      console.warn(`üîä Tipo de som n√£o encontrado: ${soundType}`);
      return;
    }

    try {
      // Sons com m√∫ltiplas frequ√™ncias (acordes)
      if (config.frequencies) {
        config.frequencies.forEach((freq, index) => {
          setTimeout(() => {
            createOscillator(freq, config.duration, config.volume, config.type);
          }, index * (config.duration / 2));
        });
      } else {
        // Som simples
        createOscillator(config.frequency, config.duration, config.volume, config.type);
      }
    } catch (error) {
      console.error('üîä Erro ao reproduzir som:', error);
    }
  };

  // Sons espec√≠ficos para contextos do OFIX
  const playLowStockAlert = () => {
    console.log('üîä Alerta: Estoque baixo detectado!');
    playSound('lowStock');
    
    // Som duplo para chamar aten√ß√£o
    setTimeout(() => {
      playSound('lowStock');
    }, 1000);
  };

  const playNewMessageAlert = () => {
    console.log('üîä Nova mensagem recebida');
    playSound('newMessage');
  };

  const playCriticalAlert = () => {
    console.log('üîä Alerta cr√≠tico!');
    playSound('criticalAlert');
    
    // Repetir 3 vezes para urg√™ncia
    setTimeout(() => playSound('criticalAlert'), 600);
    setTimeout(() => playSound('criticalAlert'), 1200);
  };

  const playNotification = () => {
    console.log('üîä Notifica√ß√£o do sistema');
    playSound('notification');
  };

  const playSuccess = () => {
    console.log('üîä Opera√ß√£o realizada com sucesso');
    playSound('success');
  };

  const playError = () => {
    console.log('üîä Erro detectado');
    playSound('error');
  };

  // Fun√ß√£o para alertas baseados em status de servi√ßos
  const playServiceStatusAlert = (status) => {
    switch (status) {
      case 'AGUARDANDO_PECAS':
        playLowStockAlert();
        break;
      case 'AGUARDANDO_APROVACAO':
        playNotification();
        break;
      case 'FINALIZADO':
        playSuccess();
        break;
      case 'CANCELADO':
        playError();
        break;
      default:
        playNotification();
    }
  };

  // Fun√ß√£o para testar todos os sons
  const testAllSounds = () => {
    console.log('üîä Testando todos os sons...');
    
    const sounds = ['notification', 'success', 'error', 'newMessage', 'lowStock', 'criticalAlert'];
    
    sounds.forEach((sound, index) => {
      setTimeout(() => {
        console.log(`üîä Testando: ${sound}`);
        playSound(sound);
      }, index * 1000);
    });
  };

  // Habilitar/desabilitar sons
  const toggleSounds = () => {
    setIsEnabled(!isEnabled);
    console.log(`üîä Sons ${!isEnabled ? 'habilitados' : 'desabilitados'}`);
    
    if (!isEnabled) {
      playNotification(); // Som de confirma√ß√£o
    }
  };

  // Ajustar volume geral
  const setGlobalVolume = (newVolume) => {
    const clampedVolume = Math.max(0, Math.min(1, newVolume));
    setVolume(clampedVolume);
    console.log(`üîä Volume ajustado para: ${Math.round(clampedVolume * 100)}%`);
    
    // Som de teste no novo volume
    playNotification();
  };

  return {
    // Estado
    isEnabled,
    volume,
    
    // Controles principais
    toggleSounds,
    setGlobalVolume,
    testAllSounds,
    
    // Sons espec√≠ficos
    playLowStockAlert,
    playNewMessageAlert,
    playCriticalAlert,
    playNotification,
    playSuccess,
    playError,
    playServiceStatusAlert,
    
    // Som gen√©rico
    playSound
  };
};

// Hook para monitorar alertas ativos e reproduzir sons automaticamente
export const useActiveAlertsMonitor = () => {
  const { playLowStockAlert, playCriticalAlert, playNotification } = useAudioNotifications();
  const [lastAlertCheck, setLastAlertCheck] = useState(Date.now());
  
  // Fun√ß√£o para verificar alertas ativos no sistema
  const checkActiveAlerts = async () => {
    try {
      // Verificar estoque baixo
      const lowStockItems = await checkLowStockItems();
      if (lowStockItems.length > 0) {
        playLowStockAlert();
      }
      
      // Verificar servi√ßos cr√≠ticos
      const criticalServices = await checkCriticalServices();
      if (criticalServices.length > 0) {
        playCriticalAlert();
      }
      
      // Verificar notifica√ß√µes pendentes
      const pendingNotifications = await checkPendingNotifications();
      if (pendingNotifications.length > 0) {
        playNotification();
      }
      
      setLastAlertCheck(Date.now());
    } catch (error) {
      console.error('üîä Erro ao verificar alertas:', error);
    }
  };

  // Fun√ß√µes auxiliares para verificar diferentes tipos de alertas
  const checkLowStockItems = async () => {
    // TODO: Implementar verifica√ß√£o de estoque baixo
    return [];
  };

  const checkCriticalServices = async () => {
    // TODO: Implementar verifica√ß√£o de servi√ßos cr√≠ticos
    return [];
  };

  const checkPendingNotifications = async () => {
    // TODO: Implementar verifica√ß√£o de notifica√ß√µes pendentes
    return [];
  };

  return {
    checkActiveAlerts,
    lastAlertCheck
  };
};
