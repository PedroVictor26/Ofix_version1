/**
 * ü§ñ MATIAS AGENT CORE
 * 
 * Motor principal do agente inteligente Matias
 * Respons√°vel por orquestrar todas as capacidades do agente
 */

import { ActionRegistry } from './ActionRegistry.js';
import { DecisionEngine } from './DecisionEngine.js';
import { ContextManager } from './ContextManager.js';

class AgentCore {
  constructor() {
    this.actionRegistry = new ActionRegistry();
    this.decisionEngine = new DecisionEngine(this.actionRegistry);
    this.contextManager = new ContextManager();
    this.isInitialized = false;
  }

  /**
   * Inicializar o agente e todos os seus componentes
   */
  async initialize() {
    console.log('ü§ñ Inicializando Matias Agent Core...');
    
    try {
      // Inicializar componentes
      await this.actionRegistry.initialize();
      await this.decisionEngine.initialize();
      await this.contextManager.initialize();
      
      this.isInitialized = true;
      console.log('‚úÖ Matias Agent Core inicializado com sucesso!');
      
      return {
        success: true,
        message: 'Agente inicializado',
        capabilities: this.getCapabilities()
      };
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Agent Core:', error);
      throw error;
    }
  }

  /**
   * Processar uma mensagem/comando e executar a√ß√µes apropriadas
   */
  async processMessage(message, context = {}) {
    if (!this.isInitialized) {
      throw new Error('Agente n√£o foi inicializado. Chame initialize() primeiro.');
    }

    console.log('üì© Processando mensagem:', message.substring(0, 100) + '...');
    
    try {
      // 1. Enriquecer contexto com dados persistentes
      const enrichedContext = await this.contextManager.enrichContext(context);
      
      // 2. Analisar inten√ß√£o e decidir a√ß√µes
      const decision = await this.decisionEngine.processIntent(message, enrichedContext);
      
      // 3. Executar a√ß√µes se necess√°rio
      const executionResults = [];
      if (decision.actions && decision.actions.length > 0) {
        // Separar a√ß√µes prim√°rias de fallbacks
        const primaryActions = decision.actions.filter(action => !action.fallback);
        const fallbackActions = decision.actions.filter(action => action.fallback);
        
        // Executar a√ß√µes prim√°rias primeiro
        for (const action of primaryActions) {
          console.log(`‚ö° Executando a√ß√£o: ${action.type}`);
          try {
            const result = await this.executeAction(action, enrichedContext);
            executionResults.push(result);
            
            // Se foi uma busca de cliente bem-sucedida, atualizar contexto
            if (action.type === 'client.search' && result.success && result.result) {
              // Verificar se a busca foi bem-sucedida e tem dados
              if (result.result.success && result.result.data && result.result.data.length > 0) {
                const clientData = result.result.data[0]; // Primeiro cliente encontrado
                
                if (clientData) {
                  enrichedContext.lastClientId = clientData.id || clientData.clienteId;
                  enrichedContext.lastVehicleId = clientData.veiculoId;
                  
                  // Atualizar par√¢metros das pr√≥ximas a√ß√µes se aplic√°vel
                  for (let i = decision.actions.indexOf(action) + 1; i < decision.actions.length; i++) {
                    const nextAction = decision.actions[i];
                    
                    if (nextAction.type === 'service.create' && !nextAction.parameters.clienteId) {
                      nextAction.parameters.clienteId = clientData.id || clientData.clienteId;
                      
                      // Se temos dados do ve√≠culo, incluir tamb√©m
                      if (clientData.veiculoId) {
                        nextAction.parameters.veiculoId = clientData.veiculoId;
                      } else if (clientData.veiculos && clientData.veiculos.length > 0) {
                        // Se n√£o tem veiculoId estruturado, usar o primeiro ve√≠culo como refer√™ncia
                        const veiculo = clientData.veiculos[0];
                        nextAction.parameters.veiculoDescricao = veiculo;
                        
                        // Criar um veiculoId tempor√°rio baseado no cliente
                        nextAction.parameters.veiculoId = `VEI-${clientData.id}-001`;
                      }
                    }
                  }
                  
                  // Cliente encontrado - remover fallbacks de cria√ß√£o de cliente
                  fallbackActions.splice(0, fallbackActions.length, 
                    ...fallbackActions.filter(fa => fa.type !== 'client.create'));
                }
              } else {
                // Busca n√£o encontrou cliente - executar fallbacks relevantes
                console.log('‚ö†Ô∏è Cliente n√£o encontrado - executando fallbacks');
              }
            }
          } catch (error) {
            const failedResult = {
              action: action.type,
              success: false,
              error: error.message,
              parameters: action.parameters
            };
            executionResults.push(failedResult);
          }
        }
        
        // Executar a√ß√µes de fallback se necess√°rio
        for (const fallbackAction of fallbackActions) {
          console.log(`üîÑ Executando fallback: ${fallbackAction.type}`);
          try {
            const result = await this.executeAction(fallbackAction, enrichedContext);
            executionResults.push(result);
            
            // Se criou cliente com sucesso, atualizar contexto para pr√≥ximas a√ß√µes
            if (fallbackAction.type === 'client.create' && result.success) {
              enrichedContext.lastClientId = result.result?.data?.id;
              
              // Atualizar a√ß√µes subsequentes com o novo clienteId
              for (const remainingAction of decision.actions) {
                if (remainingAction.type === 'service.create' && !remainingAction.parameters.clienteId) {
                  remainingAction.parameters.clienteId = result.result?.data?.id;
                }
              }
            }
          } catch (error) {
            const failedResult = {
              action: fallbackAction.type,
              success: false,
              error: error.message,
              parameters: fallbackAction.parameters
            };
            executionResults.push(failedResult);
          }
        }
      }
      
      // 4. Salvar contexto atualizado
      await this.contextManager.saveInteraction(message, decision, executionResults, enrichedContext);
      
      // 5. Gerar resposta final
      const response = await this.generateResponse(decision, executionResults, enrichedContext);
      
      console.log('‚úÖ Mensagem processada com sucesso');
      
      return {
        success: true,
        response,
        actions_executed: executionResults,
        decision_confidence: decision.confidence,
        context_used: enrichedContext.sources || []
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao processar mensagem:', error);
      
      return {
        success: false,
        error: error.message,
        fallback_response: 'Desculpe, tive um problema para processar sua solicita√ß√£o. Pode tentar novamente?'
      };
    }
  }

  /**
   * Executar uma a√ß√£o espec√≠fica
   */
  async executeAction(action, context) {
    console.log(`üîß Executando a√ß√£o: ${action.type}`);
    
    try {
      // Buscar a a√ß√£o no registry
      const actionHandler = this.actionRegistry.getAction(action.type);
      
      if (!actionHandler) {
        throw new Error(`A√ß√£o n√£o encontrada: ${action.type}`);
      }
      
      // Validar par√¢metros
      if (actionHandler.requiredParams) {
        for (const param of actionHandler.requiredParams) {
          if (!action.parameters || !action.parameters[param]) {
            throw new Error(`Par√¢metro obrigat√≥rio ausente: ${param}`);
          }
        }
      }
      
      // Verificar permiss√µes
      if (actionHandler.requiresAuth && !context.user) {
        throw new Error('A√ß√£o requer autentica√ß√£o');
      }
      
      // Executar a√ß√£o
      const startTime = Date.now();
      const result = await actionHandler.execute(action.parameters, context);
      const executionTime = Date.now() - startTime;
      
      // Registrar m√©tricas
      await this.recordMetrics(action.type, executionTime, true, result);
      
      console.log(`‚úÖ A√ß√£o ${action.type} executada com sucesso em ${executionTime}ms`);
      
      return {
        action: action.type,
        success: true,
        result,
        executionTime,
        timestamp: new Date()
      };
      
    } catch (error) {
      console.error(`‚ùå Erro ao executar a√ß√£o ${action.type}:`, error);
      
      // Registrar m√©tricas de erro
      await this.recordMetrics(action.type, 0, false, { error: error.message });
      
      return {
        action: action.type,
        success: false,
        error: error.message,
        timestamp: new Date()
      };
    }
  }

  /**
   * Gerar resposta baseada na decis√£o e resultados das a√ß√µes
   */
  async generateResponse(decision, executionResults, context) {
    // Se h√° a√ß√µes executadas, incluir seus resultados na resposta
    let responseText = decision.response || '';
    
    // Adicionar informa√ß√µes sobre a√ß√µes executadas
    const successfulActions = executionResults.filter(r => r.success);
    const failedActions = executionResults.filter(r => !r.success);
    
    if (successfulActions.length > 0) {
      responseText += '\n\n‚úÖ **A√ß√µes realizadas:**\n';
      successfulActions.forEach(action => {
        responseText += `‚Ä¢ ${this.getActionDescription(action)}\n`;
      });
    }
    
    if (failedActions.length > 0) {
      responseText += '\n\nüìã **Para completar a a√ß√£o, preciso de:**\n';
      failedActions.forEach(action => {
        if (action.error && action.error.includes('clienteId')) {
          responseText += `‚Ä¢ **Nome do cliente** (ex: Jo√£o Silva)\n`;
          responseText += `‚Ä¢ **Telefone do cliente** (ex: 11999999999)\n`;
        }
        if (action.error && action.error.includes('veiculoId')) {
          responseText += `‚Ä¢ **Placa do ve√≠culo** (ex: ABC-1234)\n`;
          responseText += `‚Ä¢ **Modelo do ve√≠culo** (ex: Honda Civic)\n`;
        }
      });
      
      responseText += `\nüí¨ **Exemplo completo:**\n`;
      responseText += `"Criar OS para troca de √≥leo do cliente Jo√£o Silva, telefone 11999999999, Honda Civic placa ABC-1234"`;
    }
    
    return {
      text: responseText.trim(),
      actions: executionResults,
      confidence: decision.confidence,
      suggestions: decision.suggestions || [],
      metadata: {
        processing_time: Date.now() - context.start_time,
        context_sources: context.sources?.length || 0,
        actions_executed: successfulActions.length,
        actions_failed: failedActions.length
      }
    };
  }

  /**
   * Obter descri√ß√£o amig√°vel de uma a√ß√£o executada
   */
  getActionDescription(actionResult) {
    const descriptions = {
      'service.create': 'Ordem de servi√ßo criada',
      'client.create': 'Cliente cadastrado',
      'schedule.book': 'Agendamento realizado',
      'notification.send': 'Notifica√ß√£o enviada',
      'diagnostic.analyze': 'Diagn√≥stico realizado'
    };
    
    return descriptions[actionResult.action] || actionResult.action;
  }

  /**
   * Registrar m√©tricas de execu√ß√£o
   */
  async recordMetrics(actionType, executionTime, success, _result) {
    try {
      // TODO: Implementar persist√™ncia de m√©tricas
      console.log(`üìä M√©trica registrada: ${actionType} - ${success ? 'sucesso' : 'erro'} - ${executionTime}ms`);
    } catch (error) {
      console.error('Erro ao registrar m√©tricas:', error);
    }
  }

  /**
   * Obter capacidades atuais do agente
   */
  getCapabilities() {
    if (!this.isInitialized) {
      return [];
    }
    
    return {
      actions: this.actionRegistry.getAvailableActions(),
      skills: this.actionRegistry.getAvailableSkills(),
      integrations: this.actionRegistry.getAvailableIntegrations(),
      version: '1.0.0'
    };
  }

  /**
   * Verificar sa√∫de do agente
   */
  async healthCheck() {
    try {
      const checks = {
        core: this.isInitialized,
        actionRegistry: await this.actionRegistry.healthCheck(),
        decisionEngine: await this.decisionEngine.healthCheck(),
        contextManager: await this.contextManager.healthCheck()
      };
      
      const allHealthy = Object.values(checks).every(check => check === true);
      
      return {
        healthy: allHealthy,
        checks,
        timestamp: new Date()
      };
    } catch (error) {
      return {
        healthy: false,
        error: error.message,
        timestamp: new Date()
      };
    }
  }
}

export default AgentCore;
