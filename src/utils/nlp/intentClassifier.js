/**
 * üß† Classificador de Inten√ß√µes (NLP)
 * 
 * Identifica a inten√ß√£o do usu√°rio baseado em padr√µes de texto
 */

import logger from '../logger.js';

// Padr√µes para cada tipo de inten√ß√£o
const INTENT_PATTERNS = {
  consulta_preco: {
    keywords: [
      'quanto custa', 'qual o valor', 'qual valor', 'pre√ßo', 'valor de', 'valor da',
      'quanto √©', 'quanto fica', 'quanto sai', 'custo', 'cobram', 'cobra',
      'pre√ßo de', 'pre√ßo da', 'quanto pago', 'quanto vou pagar', 'valor do servi√ßo',
      'quanto custa a', 'quanto custa o', 'quanto custa uma', 'quanto custa um',
      'qual √© o pre√ßo', 'qual √© o valor', 'me diz o pre√ßo', 'me diz o valor'
    ],
    weight: 1.2
  },
  agendamento: {
    keywords: [
      'agendar', 'marcar', 'reservar', 'agendar para', 'marcar para', 
      'quero agendar', 'gostaria de agendar', 'preciso agendar',
      'fazer agendamento', 'criar agendamento', 'novo agendamento',
      'marcar hor√°rio', 'reservar hor√°rio', 'disponibilidade para'
    ],
    weight: 1.0
  },
  consulta_cliente: {
    keywords: [
      'buscar cliente', 'dados do cliente', 'informa√ß√µes do cliente', 
      'cliente', 'cadastro', 'procurar cliente', 'encontrar cliente',
      'ver cliente', 'consultar cliente', 'informa√ß√µes de', 'dados de'
    ],
    weight: 0.8
  },
  consulta_estoque: {
    keywords: [
      'tem em estoque', 'disponibilidade', 'tem', 'estoque', 'pe√ßa dispon√≠vel',
      'tem pe√ßa', 'tem produto', 'dispon√≠vel', 'em estoque', 'verificar estoque',
      'consultar estoque', 'checar estoque', 'ver estoque'
    ],
    weight: 0.9
  },
  consulta_os: {
    keywords: [
      'status da os', 'andamento', 'ordem de servi√ßo', 'os n√∫mero', 'como est√°',
      'status do servi√ßo', 'situa√ß√£o da os', 'acompanhar os', 'ver os',
      'consultar os', 'n√∫mero da os', 'os', 'ordem'
    ],
    weight: 0.9
  },
  saudacao: {
    keywords: [
      'oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hey', 'ola',
      'e a√≠', 'e ai', 'opa', 'salve', 'fala'
    ],
    weight: 0.7
  },
  ajuda: {
    keywords: [
      'ajuda', 'help', 'o que voc√™ faz', 'como funciona', 'comandos',
      'o que pode fazer', 'quais comandos', 'me ajuda', 'preciso de ajuda',
      'n√£o sei', 'nao sei', 'como usar'
    ],
    weight: 0.8
  }
};

/**
 * Classifica a inten√ß√£o de uma mensagem
 * @param {string} mensagem - Mensagem do usu√°rio
 * @returns {Object} - { intencao, confianca, alternativas }
 */
export const classifyIntent = (mensagem) => {
  if (!mensagem || typeof mensagem !== 'string') {
    logger.warn('Mensagem inv√°lida para classifica√ß√£o de inten√ß√£o');
    return {
      intencao: 'desconhecida',
      confianca: 0,
      alternativas: []
    };
  }

  const mensagemLower = mensagem.toLowerCase().trim();
  const scores = {};

  // Calcular score para cada inten√ß√£o
  Object.entries(INTENT_PATTERNS).forEach(([intencao, config]) => {
    let score = 0;
    let matchCount = 0;

    config.keywords.forEach(keyword => {
      if (mensagemLower.includes(keyword.toLowerCase())) {
        score += config.weight;
        matchCount++;
      }
    });

    // Normalizar score baseado no n√∫mero de matches
    if (matchCount > 0) {
      scores[intencao] = {
        score: score / config.keywords.length,
        matchCount
      };
    }
  });

  // Ordenar por score
  const sortedIntents = Object.entries(scores)
    .sort((a, b) => b[1].score - a[1].score)
    .map(([intencao, data]) => ({
      intencao,
      confianca: Math.min(data.score * data.matchCount, 1.0)
    }));

  // Resultado principal
  const resultado = sortedIntents.length > 0
    ? sortedIntents[0]
    : { intencao: 'desconhecida', confianca: 0 };

  // Alternativas (outras inten√ß√µes poss√≠veis)
  const alternativas = sortedIntents.slice(1, 3);

  logger.debug('Inten√ß√£o classificada', {
    mensagem: mensagem.substring(0, 50),
    intencao: resultado.intencao,
    confianca: resultado.confianca,
    alternativasCount: alternativas.length
  });

  return {
    ...resultado,
    alternativas
  };
};

/**
 * Verifica se a mensagem tem m√∫ltiplas inten√ß√µes
 * @param {string} mensagem - Mensagem do usu√°rio
 * @returns {Array} - Lista de inten√ß√µes detectadas
 */
export const detectMultipleIntents = (mensagem) => {
  const classification = classifyIntent(mensagem);
  
  const intencoes = [
    {
      intencao: classification.intencao,
      confianca: classification.confianca
    },
    ...classification.alternativas
  ].filter(i => i.confianca > 0.3); // Apenas inten√ß√µes com confian√ßa > 30%

  return intencoes;
};

/**
 * Adiciona novos padr√µes para uma inten√ß√£o
 * @param {string} intencao - Nome da inten√ß√£o
 * @param {Array<string>} keywords - Novas palavras-chave
 */
export const addIntentPatterns = (intencao, keywords) => {
  if (!INTENT_PATTERNS[intencao]) {
    INTENT_PATTERNS[intencao] = {
      keywords: [],
      weight: 1.0
    };
  }

  INTENT_PATTERNS[intencao].keywords.push(...keywords);
  
  logger.info('Novos padr√µes adicionados', {
    intencao,
    keywordsCount: keywords.length
  });
};

export default {
  classifyIntent,
  detectMultipleIntents,
  addIntentPatterns
};
