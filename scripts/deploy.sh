#!/bin/bash

# üöÄ SCRIPT DE DEPLOY AUTOMATIZADO - Sistema Matias
# Deploy completo para produ√ß√£o com verifica√ß√µes de seguran√ßa

set -euo pipefail

# Configura√ß√µes
PROJECT_NAME="matias"
DEPLOY_ENV="${1:-production}"
VERSION=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="/backups"
LOG_FILE="/var/log/deploy-${VERSION}.log"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARN: $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

# Verificar se est√° sendo executado como root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "Este script n√£o deve ser executado como root!"
    fi
}

# Verificar depend√™ncias
check_dependencies() {
    info "üîç Verificando depend√™ncias..."
    
    local deps=("docker" "docker-compose" "git" "curl" "jq")
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            error "Depend√™ncia necess√°ria n√£o encontrada: $dep"
        fi
    done
    
    log "‚úÖ Todas as depend√™ncias est√£o instaladas"
}

# Verificar configura√ß√µes
check_config() {
    info "‚öôÔ∏è Verificando configura√ß√µes..."
    
    if [[ ! -f ".env.${DEPLOY_ENV}" ]]; then
        error "Arquivo de configura√ß√£o .env.${DEPLOY_ENV} n√£o encontrado!"
    fi
    
    # Carregar vari√°veis de ambiente
    source ".env.${DEPLOY_ENV}"
    
    # Verificar vari√°veis obrigat√≥rias
    local required_vars=(
        "DATABASE_URL"
        "REDIS_URL" 
        "OPENAI_API_KEY"
        "JWT_SECRET"
        "ENCRYPTION_KEY"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            error "Vari√°vel de ambiente obrigat√≥ria n√£o definida: $var"
        fi
    done
    
    log "‚úÖ Configura√ß√µes validadas"
}

# Executar testes
run_tests() {
    info "üß™ Executando testes..."
    
    # Testes unit√°rios
    log "Executando testes unit√°rios..."
    npm test || error "Testes unit√°rios falharam!"
    
    # Testes de integra√ß√£o
    log "Executando testes de integra√ß√£o..."
    npm run test:integration || error "Testes de integra√ß√£o falharam!"
    
    # Verifica√ß√£o de seguran√ßa
    log "Executando verifica√ß√£o de seguran√ßa..."
    npm audit --audit-level=moderate || warn "Vulnerabilidades de seguran√ßa encontradas"
    
    # Linting
    log "Executando verifica√ß√£o de c√≥digo..."
    npm run lint || error "Problemas de linting encontrados!"
    
    log "‚úÖ Todos os testes passaram"
}

# Backup do banco de dados
backup_database() {
    info "üíæ Criando backup do banco de dados..."
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="${BACKUP_DIR}/matias_backup_${timestamp}.sql"
    
    # Criar diret√≥rio de backup se n√£o existir
    mkdir -p "$BACKUP_DIR"
    
    # Realizar backup
    docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump \
        -U "${POSTGRES_USER}" \
        -d "${POSTGRES_DB}" \
        --clean --if-exists > "$backup_file" || error "Falha no backup do banco de dados!"
    
    # Comprimir backup
    gzip "$backup_file"
    
    log "‚úÖ Backup criado: ${backup_file}.gz"
}

# Build das imagens Docker
build_images() {
    info "üèóÔ∏è Construindo imagens Docker..."
    
    # Build da imagem principal
    log "Construindo imagem do Matias..."
    docker build -f Dockerfile.prod -t "matias:${VERSION}" -t "matias:latest" . || error "Falha no build da imagem!"
    
    # Verificar imagem
    docker run --rm "matias:${VERSION}" node --version || error "Imagem inv√°lida!"
    
    log "‚úÖ Imagens constru√≠das com sucesso"
}

# Deploy da aplica√ß√£o
deploy_application() {
    info "üöÄ Iniciando deploy da aplica√ß√£o..."
    
    # Parar servi√ßos atuais (se existirem)
    log "Parando servi√ßos atuais..."
    docker-compose -f docker-compose.prod.yml down --remove-orphans || warn "Nenhum servi√ßo rodando"
    
    # Aplicar migra√ß√µes do banco
    log "Aplicando migra√ß√µes do banco de dados..."
    docker-compose -f docker-compose.prod.yml run --rm matias-app npx prisma migrate deploy || error "Falha nas migra√ß√µes!"
    
    # Subir servi√ßos
    log "Iniciando servi√ßos..."
    docker-compose -f docker-compose.prod.yml up -d || error "Falha ao iniciar servi√ßos!"
    
    log "‚úÖ Aplica√ß√£o deployada"
}

# Verificar sa√∫de dos servi√ßos
health_check() {
    info "ü©∫ Verificando sa√∫de dos servi√ßos..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        log "Tentativa $attempt/$max_attempts - Verificando sa√∫de..."
        
        # Verificar aplica√ß√£o principal
        if curl -f -s http://localhost:3000/health > /dev/null; then
            log "‚úÖ Aplica√ß√£o principal est√° saud√°vel"
            break
        fi
        
        if [[ $attempt -eq $max_attempts ]]; then
            error "Aplica√ß√£o n√£o respondeu ap√≥s $max_attempts tentativas!"
        fi
        
        sleep 10
        ((attempt++))
    done
    
    # Verificar outros servi√ßos
    local services=("postgres:5432" "redis:6379" "prometheus:9090")
    
    for service in "${services[@]}"; do
        local host=$(echo "$service" | cut -d':' -f1)
        local port=$(echo "$service" | cut -d':' -f2)
        
        if nc -z localhost "$port" 2>/dev/null; then
            log "‚úÖ Servi√ßo $host est√° rodando"
        else
            warn "‚ö†Ô∏è Servi√ßo $host n√£o est√° respondendo na porta $port"
        fi
    done
}

# Testes de fuma√ßa
smoke_tests() {
    info "üí® Executando testes de fuma√ßa..."
    
    # Teste b√°sico da API
    log "Testando endpoint principal..."
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
    if [[ "$response" != "200" ]]; then
        error "Endpoint principal retornou c√≥digo $response"
    fi
    
    # Teste do chat do Matias
    log "Testando chat do Matias..."
    local chat_response=$(curl -s -X POST http://localhost:3000/api/matias/chat \
        -H "Content-Type: application/json" \
        -d '{"message": "Hello Matias", "language": "en"}')
    
    if ! echo "$chat_response" | jq -e '.success' > /dev/null; then
        error "Chat do Matias n√£o est√° funcionando corretamente"
    fi
    
    # Teste de m√©tricas
    log "Testando m√©tricas..."
    if ! curl -f -s http://localhost:9090/api/v1/query?query=up > /dev/null; then
        warn "M√©tricas n√£o est√£o acess√≠veis"
    fi
    
    log "‚úÖ Testes de fuma√ßa passaram"
}

# Notificar equipe
notify_team() {
    local status="$1"
    local message="$2"
    
    info "üì¢ Notificando equipe..."
    
    # Slack webhook (se configurado)
    if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üöÄ Deploy Matias - $status: $message\"}" \
            "$SLACK_WEBHOOK_URL" || warn "Falha ao enviar notifica√ß√£o Slack"
    fi
    
    # Email (se configurado)
    if command -v mail &> /dev/null && [[ -n "${NOTIFICATION_EMAIL:-}" ]]; then
        echo "$message" | mail -s "Deploy Matias - $status" "$NOTIFICATION_EMAIL" || warn "Falha ao enviar email"
    fi
}

# Rollback em caso de falha
rollback() {
    error "üîÑ Iniciando rollback..."
    
    # Parar servi√ßos atuais
    docker-compose -f docker-compose.prod.yml down
    
    # Restaurar backup mais recente
    local latest_backup=$(ls -t "${BACKUP_DIR}"/matias_backup_*.sql.gz | head -1)
    
    if [[ -n "$latest_backup" ]]; then
        log "Restaurando backup: $latest_backup"
        gunzip -c "$latest_backup" | docker-compose -f docker-compose.prod.yml exec -T postgres psql \
            -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"
    fi
    
    # Reverter para vers√£o anterior
    docker-compose -f docker-compose.prod.yml up -d
    
    notify_team "FAILED" "Deploy falhou. Rollback executado."
    exit 1
}

# Limpeza p√≥s-deploy
cleanup() {
    info "üßπ Executando limpeza..."
    
    # Remover imagens antigas (manter √∫ltimas 3)
    log "Removendo imagens antigas..."
    docker images "matias" --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
        tail -n +4 | awk '{print $1}' | xargs -r docker rmi || warn "Falha na limpeza de imagens"
    
    # Limpar volumes n√£o utilizados
    docker volume prune -f || warn "Falha na limpeza de volumes"
    
    # Limpar logs antigos (manter √∫ltimos 30 dias)
    find /var/log -name "deploy-*.log" -mtime +30 -delete || warn "Falha na limpeza de logs"
    
    log "‚úÖ Limpeza conclu√≠da"
}

# Fun√ß√£o principal
main() {
    log "üöÄ Iniciando deploy do Sistema Matias v${VERSION}"
    log "Ambiente: ${DEPLOY_ENV}"
    
    # Configurar trap para rollback em caso de erro
    trap rollback ERR
    
    # Executar verifica√ß√µes pr√©-deploy
    check_root
    check_dependencies
    check_config
    run_tests
    
    # Executar deploy
    backup_database
    build_images
    deploy_application
    
    # Verifica√ß√µes p√≥s-deploy
    health_check
    smoke_tests
    
    # Finalizar
    cleanup
    
    local deploy_time=$(($(date +%s) - $(date -d "$(echo $VERSION | sed 's/-/ /' | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1-\2-\3/')" +%s)))
    
    log "‚úÖ Deploy conclu√≠do com sucesso!"
    log "Vers√£o: ${VERSION}"
    log "Tempo total: ${deploy_time}s"
    
    notify_team "SUCCESS" "Deploy do Matias v${VERSION} conclu√≠do com sucesso em ${deploy_time}s"
    
    # Remover trap de rollback
    trap - ERR
}

# Verificar argumentos
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    if [[ $# -gt 1 ]]; then
        error "Uso: $0 [environment]"
    fi
    
    main "$@"
fi
