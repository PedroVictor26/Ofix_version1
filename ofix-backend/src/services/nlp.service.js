/**
 * ü§ñ NLP Service - Processamento de Linguagem Natural
 * 
 * Servi√ßo para processar mensagens do usu√°rio e extrair:
 * - Inten√ß√µes (o que o usu√°rio quer fazer)
 * - Entidades (dados mencionados: cliente, ve√≠culo, data, hora)
 */

export class NLPService {
    /**
     * Detecta a inten√ß√£o principal da mensagem do usu√°rio
     * @param {string} mensagem - Mensagem do usu√°rio
     * @returns {string} - Tipo de inten√ß√£o detectada
     */
    static detectarIntencao(mensagem) {
        const msg = mensagem.toLowerCase().trim();
        
        // INTEN√á√ÉO: AJUDA (verificar primeiro para n√£o confundir)
        const padraoAjuda = /\b(ajuda|help|o que pode|como funciona|pode fazer|comandos|menu|op√ß√µes)\b/i;
        if (padraoAjuda.test(msg)) {
            return 'AJUDA';
        }
        
        // INTEN√á√ÉO: AGENDAMENTO (incluir mais varia√ß√µes)
        const padraoAgendamento = /\b(agendar|agendamento|marcar|marca|marca√ß√£o|reservar|reserva|hor√°rio|horario|data|segunda|ter√ßa|terca|quarta|quinta|sexta|s√°bado|sabado|domingo|revis√£o|revisao|troca|manuten√ß√£o|manutencao|√†s|as)\b/i;
        if (padraoAgendamento.test(msg)) {
            return 'AGENDAMENTO';
        }
        
        // INTEN√á√ÉO: CONSULTA ORDEM DE SERVI√áO
        const padraoOS = /\b(ordem|servi√ßo|servico|os|status|andamento|pronto|terminado|conclu√≠do|concluido|situa√ß√£o|situacao|verificar|consultar os|meu carro|ve√≠culo|veiculo)\b/i;
        if (padraoOS.test(msg)) {
            return 'CONSULTA_OS';
        }
        
        // INTEN√á√ÉO: CONSULTA ESTOQUE
        const padraoEstoque = /\b(pe√ßa|peca|pe√ßas|pecas|estoque|dispon√≠vel|disponivel|tem em|preciso de|filtro|√≥leo|oleo|pneu|vela|bateria|pastilha|disco|amortecedor)\b/i;
        if (padraoEstoque.test(msg)) {
            return 'CONSULTA_ESTOQUE';
        }
        
        // INTEN√á√ÉO: ESTAT√çSTICAS
        const padraoEstatisticas = /\b(quantos|quanto|total|relat√≥rio|relatorio|resumo|hoje|ontem|m√™s|mes|semana|estat√≠stica|estatistica|n√∫meros|numeros|dados|carros atendidos|faturamento)\b/i;
        if (padraoEstatisticas.test(msg)) {
            return 'ESTATISTICAS';
        }
        
        // INTEN√á√ÉO: CADASTRAR CLIENTE (verificar ANTES de consulta para n√£o confundir)
        // Detecta tanto comandos expl√≠citos quanto dados estruturados
        const padraoCadastro = /\b(cadastr|novo cliente|adicionar cliente|criar cliente|incluir cliente|registrar cliente)\b/i;
        const formatoDados = /(?:nome|tel|telefone|cpf|cnpj|email):\s*[^,\n]+/i;
        
        console.log('üîç DEBUG CADASTRO:');
        console.log('   - Teste comando cadastro:', padraoCadastro.test(msg));
        console.log('   - Teste formato dados:', formatoDados.test(msg));
        console.log('   - Mensagem:', msg.substring(0, 100));
        
        if (padraoCadastro.test(msg) || formatoDados.test(msg)) {
            console.log('   ‚úÖ DETECTADO COMO CADASTRAR_CLIENTE');
            return 'CADASTRAR_CLIENTE';
        }
        
        // INTEN√á√ÉO: CONSULTA CLIENTE
        const padraoCliente = /\b(cliente|clientes|telefone|cpf|cnpj|endere√ßo|endereco|contato|dados do cliente)\b/i;
        if (padraoCliente.test(msg)) {
            console.log('   ‚ÑπÔ∏è DETECTADO COMO CONSULTA_CLIENTE');
            return 'CONSULTA_CLIENTE';
        }
        
        // DEFAULT: Conversa geral
        return 'CONVERSA_GERAL';
    }
    
    /**
     * Extrai entidades relacionadas a agendamento da mensagem
     * @param {string} mensagem - Mensagem do usu√°rio
     * @returns {Object} - Objeto com entidades extra√≠das
     */
    static extrairEntidadesAgendamento(mensagem) {
        const entidades = {};
        const msg = mensagem.toLowerCase();
        
        // 1. EXTRAIR DIA DA SEMANA
        const diasSemana = {
            'segunda': 1,
            'segunda-feira': 1,
            'ter√ßa': 2,
            'terca': 2,
            'ter√ßa-feira': 2,
            'terca-feira': 2,
            'quarta': 3,
            'quarta-feira': 3,
            'quinta': 4,
            'quinta-feira': 4,
            'sexta': 5,
            'sexta-feira': 5,
            's√°bado': 6,
            'sabado': 6
        };
        
        for (const [dia, numero] of Object.entries(diasSemana)) {
            if (msg.includes(dia)) {
                entidades.diaSemana = numero;
                entidades.diaTexto = dia;
                break;
            }
        }
        
        // 2. EXTRAIR HORA
        // Formatos: "14h", "14:00", "14 horas", "√†s 14"
        const padraoHora = /(?:√†s?\s*)?(\d{1,2})(?:h|:00|\s*horas?)?/i;
        const matchHora = mensagem.match(padraoHora);
        if (matchHora) {
            const hora = parseInt(matchHora[1]);
            if (hora >= 7 && hora <= 18) { // Hor√°rio comercial
                entidades.hora = `${hora.toString().padStart(2, '0')}:00`;
                entidades.horaTexto = `${hora}h`;
            }
        }
        
        // 3. EXTRAIR TIPO DE SERVI√áO
        const servicos = {
            'revis√£o': ['revis√£o', 'revisao', 'manuten√ß√£o', 'manutencao', 'check-up', 'checkup'],
            'troca de √≥leo': ['√≥leo', 'oleo', 'troca de √≥leo', 'troca de oleo'],
            'alinhamento': ['alinhamento', 'alinhar'],
            'balanceamento': ['balanceamento', 'balancear'],
            'freios': ['freio', 'freios', 'pastilha', 'disco'],
            'suspens√£o': ['suspens√£o', 'suspensao', 'amortecedor'],
            'ar condicionado': ['ar condicionado', 'ar-condicionado', 'ar', 'climatiza√ß√£o'],
            'bateria': ['bateria'],
            'pneus': ['pneu', 'pneus']
        };
        
        for (const [servico, palavrasChave] of Object.entries(servicos)) {
            if (palavrasChave.some(palavra => msg.includes(palavra))) {
                entidades.servico = servico;
                break;
            }
        }
        
        // Se n√£o achou, tenta pegar substantivos ap√≥s verbos como "fazer", "preciso"
        if (!entidades.servico) {
            const padraoServico = /(?:fazer|preciso|necessito|quero)\s+(?:de\s+)?(?:um[a]?\s+)?([a-z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√±\s]+?)(?:\s+no|\s+para|\s+do|\s+da|$)/i;
            const matchServico = mensagem.match(padraoServico);
            if (matchServico) {
                entidades.servico = matchServico[1].trim();
            }
        }
        
        // 4. EXTRAIR MODELO DE VE√çCULO (fazer ANTES do nome para n√£o confundir)
        const modelosComuns = [
            'Gol', 'Civic', 'Corolla', 'Uno', 'Palio', 'Fox', 'Fiesta',
            'HB20', 'Onix', 'Voyage', 'Sandero', 'Kicks', 'Compass',
            'Renegade', 'Toro', 'Hilux', 'Ranger', 'Amarok', 'S10',
            'Polo', 'Jetta', 'Fusca', 'Kombi', 'Saveiro', 'Strada'
        ];
        
        for (const modelo of modelosComuns) {
            const regex = new RegExp(`\\b${modelo}\\b`, 'i');
            if (regex.test(mensagem)) {
                entidades.veiculo = modelo;
                break;
            }
        }
        
        // 5. EXTRAIR NOME DO CLIENTE
        // Padr√µes melhorados: "do Jo√£o", "da Maria", "para o Jo√£o", "cliente Jo√£o", "Nome: Jo√£o"
        // IMPORTANTE: Ignorar se for um modelo de ve√≠culo
        
        console.log('   üîç Iniciando extra√ß√£o de nome...');
        console.log('   üìù Mensagem original:', mensagem);
        console.log('   üöó Ve√≠culo j√° detectado:', entidades.veiculo);
        
        // Se j√° detectamos um ve√≠culo, remover ele da mensagem antes de buscar o nome
        let mensagemSemVeiculo = mensagem;
        if (entidades.veiculo) {
            // Remover "para o Gol", "do Gol", etc
            const regexRemoverVeiculo = new RegExp(`\\b(para o|para a|do|da)\\s+${entidades.veiculo}\\b`, 'gi');
            mensagemSemVeiculo = mensagem.replace(regexRemoverVeiculo, '');
            console.log('   üìù Mensagem sem ve√≠culo:', mensagemSemVeiculo);
        }
        
        // Tentar padr√£o expl√≠cito primeiro: "Nome: Jo√£o" ou "Cliente: Jo√£o"
        const padraoExplicito = /(?:nome|cliente):\s*([A-Z√Ä-√úa-z√†-√º]+(?:\s+[A-Z√Ä-√úa-z√†-√º]+)*)/i;
        const matchExplicito = mensagemSemVeiculo.match(padraoExplicito);
        
        console.log('   üîé Match expl√≠cito (Nome:/Cliente:):', matchExplicito);
        
        if (matchExplicito) {
            const nomeExtraido = matchExplicito[1].trim();
            console.log('   ‚úÖ Nome extra√≠do (expl√≠cito):', nomeExtraido);
            if (!modelosComuns.some(m => m.toLowerCase() === nomeExtraido.toLowerCase())) {
                entidades.cliente = nomeExtraido;
                console.log('   ‚úÖ Cliente definido:', entidades.cliente);
            } else {
                console.log('   ‚ö†Ô∏è Nome descartado (√© modelo de ve√≠culo)');
            }
        } else {
            // Tentar padr√µes contextuais: "do Jo√£o", "da Maria", etc
            const padraoNome = /(?:do|da|para o|para a|de|cliente)\s+([A-Z√Ä-√úa-z√†-√º]+(?:\s+[A-Z√Ä-√úa-z√†-√º]+)*?)(?:\s+na|\s+no|\s+√†s|\s+as|\s+em|\s+,|\s*$)/i;
            const matchNome = mensagemSemVeiculo.match(padraoNome);
            
            console.log('   üîé Match contextual (do/da/para):', matchNome);
            
            if (matchNome) {
                const nomeExtraido = matchNome[1].trim();
                console.log('   ‚úÖ Nome extra√≠do (contextual):', nomeExtraido);
                // Verificar se n√£o √© um modelo de ve√≠culo
                if (!modelosComuns.some(m => m.toLowerCase() === nomeExtraido.toLowerCase())) {
                    entidades.cliente = nomeExtraido;
                    console.log('   ‚úÖ Cliente definido:', entidades.cliente);
                } else {
                    console.log('   ‚ö†Ô∏è Nome descartado (√© modelo de ve√≠culo):', nomeExtraido);
                }
            } else {
                console.log('   ‚ùå Nenhum nome detectado');
            }
        }
        
        // 6. EXTRAIR PLACA (formato: ABC-1234 ou ABC1234)
        // Tamb√©m aceitar formato "Placa: ABC-1234"
        let padraoPlaca = /\b([A-Z]{3}-?\d{4})\b/i;
        let matchPlaca = mensagem.match(padraoPlaca);
        
        // Se n√£o encontrou, tentar formato expl√≠cito
        if (!matchPlaca) {
            padraoPlaca = /placa:\s*([A-Z]{3}-?\d{1,4})/i;
            matchPlaca = mensagem.match(padraoPlaca);
        }
        if (matchPlaca) {
            entidades.placa = matchPlaca[1].toUpperCase().replace('-', '');
            // Formatar com h√≠fen
            if (entidades.placa.length === 7) {
                entidades.placa = `${entidades.placa.slice(0, 3)}-${entidades.placa.slice(3)}`;
            }
        }
        
        // 7. EXTRAIR DATA ESPEC√çFICA (DD/MM ou DD/MM/YYYY)
        const padraoData = /(\d{1,2})\/(\d{1,2})(?:\/(\d{2,4}))?/;
        const matchData = mensagem.match(padraoData);
        if (matchData) {
            const dia = parseInt(matchData[1]);
            const mes = parseInt(matchData[2]) - 1; // JavaScript conta meses de 0-11
            const ano = matchData[3] ? parseInt(matchData[3]) : new Date().getFullYear();
            
            const data = new Date(ano, mes, dia);
            if (!isNaN(data.getTime())) {
                entidades.dataEspecifica = data.toISOString().split('T')[0];
            }
        }
        
        // 8. DETECTAR URG√äNCIA
        const padraoUrgencia = /\b(urgente|emerg√™ncia|r√°pido|hoje|agora|imediato)\b/i;
        if (padraoUrgencia.test(msg)) {
            entidades.urgente = true;
        }
        
        return entidades;
    }
    
    /**
     * Calcula a pr√≥xima data baseada no dia da semana
     * @param {number} diaSemana - N√∫mero do dia (1=segunda, 2=ter√ßa, etc)
     * @returns {string} - Data no formato YYYY-MM-DD
     */
    static calcularProximaData(diaSemana) {
        const hoje = new Date();
        const diaAtual = hoje.getDay(); // 0=domingo, 1=segunda, etc
        
        // Calcular dias at√© o pr√≥ximo dia da semana desejado
        let diasAte = diaSemana - diaAtual;
        
        // Se o dia j√° passou esta semana, ir para a pr√≥xima
        if (diasAte <= 0) {
            diasAte += 7;
        }
        
        // Criar nova data
        const proximaData = new Date(hoje);
        proximaData.setDate(hoje.getDate() + diasAte);
        
        // Retornar no formato YYYY-MM-DD
        return proximaData.toISOString().split('T')[0];
    }
    
    /**
     * Formata data para exibi√ß√£o amig√°vel em portugu√™s
     * @param {string} dataISO - Data no formato YYYY-MM-DD
     * @returns {string} - Data formatada (ex: "Segunda, 20/10/2025")
     */
    static formatarDataAmigavel(dataISO) {
        const data = new Date(dataISO + 'T00:00:00');
        const diasSemana = ['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'];
        
        const diaSemana = diasSemana[data.getDay()];
        const dia = data.getDate().toString().padStart(2, '0');
        const mes = (data.getMonth() + 1).toString().padStart(2, '0');
        const ano = data.getFullYear();
        
        return `${diaSemana}, ${dia}/${mes}/${ano}`;
    }
    
    /**
     * Valida se todos os dados necess√°rios para agendamento est√£o presentes
     * @param {Object} entidades - Objeto com entidades extra√≠das
     * @returns {Object} - { valido: boolean, faltando: array }
     */
    static validarDadosAgendamento(entidades) {
        const faltando = [];
        
        if (!entidades.cliente && !entidades.placa) {
            faltando.push('nome do cliente ou placa do ve√≠culo');
        }
        
        if (!entidades.veiculo && !entidades.placa) {
            faltando.push('modelo do ve√≠culo');
        }
        
        if (!entidades.diaSemana && !entidades.dataEspecifica) {
            faltando.push('dia (ex: segunda, ter√ßa, ou data espec√≠fica)');
        }
        
        if (!entidades.hora) {
            faltando.push('hor√°rio (ex: 14h, 16:00)');
        }
        
        if (!entidades.servico) {
            faltando.push('tipo de servi√ßo (ex: revis√£o, troca de √≥leo)');
        }
        
        return {
            valido: faltando.length === 0,
            faltando
        };
    }
    
    /**
     * Extrai informa√ß√µes para consulta de OS
     * @param {string} mensagem - Mensagem do usu√°rio
     * @returns {Object} - Dados para consulta
     */
    static extrairDadosConsultaOS(mensagem) {
        const dados = {};
        const msg = mensagem.toLowerCase();
        
        // Extrair n√∫mero da OS
        const padraoNumeroOS = /\b(?:os|ordem|n[√∫u]mero)\s*#?(\d+)\b/i;
        const matchOS = mensagem.match(padraoNumeroOS);
        if (matchOS) {
            dados.numeroOS = parseInt(matchOS[1]);
        }
        
        // Extrair placa
        const padraoPlaca = /\b([A-Z]{3}-?\d{4})\b/i;
        const matchPlaca = mensagem.match(padraoPlaca);
        if (matchPlaca) {
            dados.placa = matchPlaca[1].toUpperCase().replace('-', '');
            if (dados.placa.length === 7) {
                dados.placa = `${dados.placa.slice(0, 3)}-${dados.placa.slice(3)}`;
            }
        }
        
        // Extrair nome
        const padraoNome = /(?:do|da|de)\s+([A-Z√Ä√Å√Ç√É√Ñ√â√à√ä√ã√ç√è√ì√î√ï√ñ√ö√ô√õ√ú√á][a-z√†√°√¢√£√§√©√®√™√´√≠√Ø√≥√¥√µ√∂√∫√π√ª√º√ß]+(?:\s+[A-Z√Ä√Å√Ç√É√Ñ√â√à√ä√ã√ç√è√ì√î√ï√ñ√ö√ô√õ√ú√á][a-z√†√°√¢√£√§√©√®√™√´√≠√Ø√≥√¥√µ√∂√∫√π√ª√º√ß]+)*)/;
        const matchNome = mensagem.match(padraoNome);
        if (matchNome) {
            dados.cliente = matchNome[1].trim();
        }
        
        // Extrair status desejado
        if (msg.includes('pronto') || msg.includes('conclu√≠do') || msg.includes('terminado')) {
            dados.status = 'CONCLUIDO';
        } else if (msg.includes('andamento') || msg.includes('fazendo')) {
            dados.status = 'EM_ANDAMENTO';
        } else if (msg.includes('aguardando') || msg.includes('pendente')) {
            dados.status = 'AGUARDANDO';
        }
        
        return dados;
    }
    
    /**
     * Extrai dados para cadastro de cliente
     * @param {string} mensagem - Mensagem do usu√°rio
     * @returns {Object} - Objeto com dados do cliente
     */
    static extrairDadosCliente(mensagem) {
        const dados = {};
        
        // Extrair nome
        const padraoNome = /(?:nome|cliente):\s*([A-Z√Ä-√úa-z√†-√º\s]+?)(?:\s*,|\s*tel|\s*cpf|\s*$)/i;
        const matchNome = mensagem.match(padraoNome);
        if (matchNome) {
            dados.nome = matchNome[1].trim();
        }
        
        // Extrair telefone (v√°rios formatos)
        const padraoTelefone = /(?:tel|telefone|celular|fone):\s*([0-9\s\(\)-]{10,15})/i;
        const matchTelefone = mensagem.match(padraoTelefone);
        if (matchTelefone) {
            dados.telefone = matchTelefone[1].trim().replace(/\D/g, '');
        }
        
        // Extrair CPF/CNPJ
        const padraoCPF = /(?:cpf|cnpj):\s*([0-9.-]{11,18})/i;
        const matchCPF = mensagem.match(padraoCPF);
        if (matchCPF) {
            dados.cpfCnpj = matchCPF[1].trim().replace(/\D/g, '');
        }
        
        // Extrair email
        const padraoEmail = /(?:email|e-mail):\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i;
        const matchEmail = mensagem.match(padraoEmail);
        if (matchEmail) {
            dados.email = matchEmail[1].trim();
        }
        
        return dados;
    }
    
    /**
     * Gera resposta de ajuda com comandos dispon√≠veis
     * @returns {string} - Texto de ajuda
     */
    static gerarMensagemAjuda() {
        return `ü§ñ **Assistente Matias - Como posso ajudar:**

**üìÖ AGENDAMENTOS**
‚Ä¢ "Agendar revis√£o para o Gol do Jo√£o na segunda √†s 14h"
‚Ä¢ "Marcar troca de √≥leo para ter√ßa 16h"
‚Ä¢ "Consulta para o Civic na sexta √†s 10h"

**üîç CONSULTAR SERVI√áOS**
‚Ä¢ "Status da OS do Gol placa ABC-1234"
‚Ä¢ "Ordens de servi√ßo do Jo√£o"
‚Ä¢ "Mostrar servi√ßos em andamento"

**üì¶ CONSULTAR ESTOQUE**
‚Ä¢ "Tem filtro de √≥leo dispon√≠vel?"
‚Ä¢ "Verificar estoque de pastilhas de freio"
‚Ä¢ "Pe√ßas em falta"

**üìä ESTAT√çSTICAS**
‚Ä¢ "Quantos carros atendemos hoje?"
‚Ä¢ "Resumo do m√™s"
‚Ä¢ "Estat√≠sticas da oficina"

**üë§ CLIENTES**
‚Ä¢ "Dados do cliente Jo√£o"
‚Ä¢ "Telefone da Maria"
‚Ä¢ "Listar clientes"

üí° **Dica:** Quanto mais detalhes voc√™ fornecer, melhor consigo ajudar!`;
    }
}

export default NLPService;
