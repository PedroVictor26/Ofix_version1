/**
 * üîç KNOWLEDGE BASE SERVICE - Matias
 * 
 * Base de conhecimento abrangente para o assistente virtual
 * Funcionalidades: FAQ, manuais t√©cnicos, procedimentos, especifica√ß√µes
 */

import fs from 'fs/promises';
import path from 'path';

class KnowledgeBaseService {
  constructor() {
    this.knowledgeBase = new Map();
    this.indexedData = new Map();
    this.categories = [
      'diagnostics',
      'procedures', 
      'specifications',
      'troubleshooting',
      'maintenance',
      'parts',
      'scheduling',
      'pricing',
      'emergency',
      'general'
    ];
    
    this.initialized = false;
  }

  /**
   * üöÄ Inicializar base de conhecimento
   */
  async initialize() {
    try {
      await this.loadStaticKnowledge();
      await this.loadDynamicKnowledge();
      await this.buildSearchIndex();
      this.initialized = true;
      console.log('‚úÖ Knowledge Base inicializada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Knowledge Base:', error);
      throw error;
    }
  }

  /**
   * üìö Carregar conhecimento est√°tico (arquivos locais)
   */
  async loadStaticKnowledge() {
    const knowledgeData = {
      // üîß DIAGN√ìSTICOS T√âCNICOS
      diagnostics: {
        'motor_nao_liga': {
          title: 'Motor N√£o Liga',
          content: `**DIAGN√ìSTICO: Motor N√£o Liga**

üîç **Verifica√ß√µes Iniciais:**
‚Ä¢ Bateria: Testar voltagem (m√≠n. 12.4V)
‚Ä¢ Combust√≠vel: Verificar n√≠vel e qualidade
‚Ä¢ Igni√ß√£o: Testar fa√≠scas nas velas
‚Ä¢ Fus√≠veis: Verificar fus√≠vel principal e igni√ß√£o

‚öôÔ∏è **Procedimento Diagn√≥stico:**
1. **Teste da Bateria:** Mult√≠metro nos terminais
2. **Sistema de Combust√≠vel:** Press√£o da bomba
3. **Sistema El√©trico:** Continuidade dos cabos
4. **Centralina:** Verificar c√≥digos de erro

üéØ **Causas Comuns:**
‚Ä¢ Bateria descarregada (40% dos casos)
‚Ä¢ Problema no sistema de combust√≠vel (25%)
‚Ä¢ Falha na igni√ß√£o (20%)
‚Ä¢ Problema el√©trico (15%)

üí° **Solu√ß√µes R√°pidas:**
‚Ä¢ Bateria: Jump start ou troca
‚Ä¢ Combust√≠vel: Verificar filtro e bomba
‚Ä¢ Igni√ß√£o: Trocar velas ou bobinas
‚Ä¢ El√©trico: Verificar fus√≠veis e rel√©s`,
          tags: ['motor', 'partida', 'bateria', 'combust√≠vel', 'igni√ß√£o'],
          category: 'diagnostics',
          difficulty: 'intermediate',
          time_estimate: '30-60 minutos',
          tools_needed: ['mult√≠metro', 'scanner', 'chaves b√°sicas']
        },

        'barulho_motor': {
          title: 'An√°lise de Ru√≠dos do Motor',
          content: `**DIAGN√ìSTICO: Ru√≠dos do Motor**

üîä **Tipos de Ru√≠do e Diagn√≥stico:**

**BATIDA MET√ÅLICA:**
‚Ä¢ Bronzinas gastas ‚Üí Ret√≠fica urgente
‚Ä¢ Pist√µes soltos ‚Üí Motor fundido
‚Ä¢ Bielas empenadas ‚Üí Revis√£o completa

**CHIADO AGUDO:**
‚Ä¢ Correia dentada ‚Üí Troca imediata
‚Ä¢ Tensor da correia ‚Üí Substituir
‚Ä¢ Bomba d'√°gua ‚Üí Verificar vazamentos

**RONCO GRAVE:**
‚Ä¢ Coxins do motor ‚Üí Trocar apoios
‚Ä¢ Escape furado ‚Üí Solda ou troca
‚Ä¢ Turbina ‚Üí Revisar turbo

**TIQUE-TAQUE:**
‚Ä¢ V√°lvulas desreguladas ‚Üí Regulagem
‚Ä¢ Tuchos hidr√°ulicos ‚Üí Trocar √≥leo
‚Ä¢ Corrente de comando ‚Üí Substituir

üéØ **M√©todo de Diagn√≥stico:**
1. Identificar localiza√ß√£o do ru√≠do
2. Relacionar com RPM do motor
3. Verificar em diferentes condi√ß√µes
4. Testar com motor frio/quente`,
          tags: ['ru√≠do', 'motor', 'diagn√≥stico', 'mec√¢nica'],
          category: 'diagnostics',
          difficulty: 'expert',
          time_estimate: '45-90 minutos'
        }
      },

      // üõ†Ô∏è PROCEDIMENTOS
      procedures: {
        'troca_oleo': {
          title: 'Procedimento: Troca de √ìleo',
          content: `**PROCEDIMENTO: Troca de √ìleo e Filtro**

‚öôÔ∏è **Materiais Necess√°rios:**
‚Ä¢ √ìleo motor (verificar especifica√ß√£o)
‚Ä¢ Filtro de √≥leo original
‚Ä¢ Junta do carter (se necess√°rio)
‚Ä¢ Ferramenta para filtro

üîß **Passo a Passo:**
1. **Prepara√ß√£o:** Motor morno (n√£o quente)
2. **Drenagem:** Remover tamp√£o do carter
3. **Filtro:** Trocar filtro e vedar rosca
4. **Enchimento:** √ìleo novo pela tampa superior
5. **Verifica√ß√£o:** N√≠vel entre m√≠n/m√°x

‚è±Ô∏è **Tempos:**
‚Ä¢ Drenagem: 15 minutos
‚Ä¢ Troca filtro: 10 minutos  
‚Ä¢ Enchimento: 5 minutos
‚Ä¢ Verifica√ß√£o: 5 minutos
‚Ä¢ **Total: 35 minutos**

üí° **Dicas Importantes:**
‚Ä¢ Nunca misturar tipos de √≥leo
‚Ä¢ Descartar √≥leo usado adequadamente
‚Ä¢ Verificar vazamentos ap√≥s 24h
‚Ä¢ Anotar KM da troca`,
          tags: ['√≥leo', 'manuten√ß√£o', 'filtro', 'procedimento'],
          category: 'procedures',
          difficulty: 'basic',
          time_estimate: '35 minutos',
          cost_estimate: 'R$ 150-300'
        },

        'alinhamento_balanceamento': {
          title: 'Alinhamento e Balanceamento',
          content: `**PROCEDIMENTO: Alinhamento e Balanceamento**

üéØ **Quando Fazer:**
‚Ä¢ Pneus com desgaste irregular
‚Ä¢ Volante trepidando
‚Ä¢ Carro "puxando" para um lado
‚Ä¢ Ap√≥s trocar pneus/amortecedores

üîß **Alinhamento (Geometria):**
‚Ä¢ **Cambagem:** Inclina√ß√£o vertical da roda
‚Ä¢ **C√°ster:** Inclina√ß√£o do eixo de dire√ß√£o
‚Ä¢ **Converg√™ncia:** Paralelismo das rodas

‚öñÔ∏è **Balanceamento:**
‚Ä¢ Distribui√ß√£o uniforme do peso
‚Ä¢ Elimina vibra√ß√µes no volante
‚Ä¢ Aumenta vida √∫til dos pneus

üìã **Processo:**
1. Inspe√ß√£o visual dos pneus
2. Verifica√ß√£o da suspens√£o
3. Medi√ß√£o na m√°quina de alinhamento
4. Ajustes conforme especifica√ß√£o
5. Balanceamento com contrapesos
6. Teste de rodagem

üí∞ **Investimento:**
‚Ä¢ Alinhamento: R$ 80-120
‚Ä¢ Balanceamento: R$ 60-100
‚Ä¢ Conjunto: R$ 120-180`,
          tags: ['alinhamento', 'balanceamento', 'pneus', 'suspens√£o'],
          category: 'procedures',
          difficulty: 'intermediate',
          time_estimate: '60-90 minutos'
        }
      },

      // üìã ESPECIFICA√á√ïES
      specifications: {
        'torques_rodas': {
          title: 'Especifica√ß√µes de Torque - Rodas',
          content: `**TORQUES DE APERTO - RODAS**

üöó **Ve√≠culos Populares:**

**VOLKSWAGEN:**
‚Ä¢ Gol/Voyage/Saveiro: 110 Nm
‚Ä¢ Polo/Virtus: 120 Nm
‚Ä¢ Passat/Jetta: 140 Nm

**FIAT:**
‚Ä¢ Uno/Mobi: 98 Nm
‚Ä¢ Palio/Siena: 105 Nm
‚Ä¢ Toro/Argo: 110 Nm

**CHEVROLET:**
‚Ä¢ Onix/Prisma: 105 Nm
‚Ä¢ Cruze/Tracker: 140 Nm
‚Ä¢ S10/Trailblazer: 140 Nm

**FORD:**
‚Ä¢ Ka/Fiesta: 105 Nm
‚Ä¢ Focus/EcoSport: 130 Nm
‚Ä¢ Ranger: 150 Nm

‚ö†Ô∏è **IMPORTANTE:**
‚Ä¢ Sempre consultar manual espec√≠fico
‚Ä¢ Apertar em cruz (estrela)
‚Ä¢ Reapertar ap√≥s 100km
‚Ä¢ Usar torqu√≠metro calibrado`,
          tags: ['torque', 'rodas', 'especifica√ß√µes', 'seguran√ßa'],
          category: 'specifications',
          difficulty: 'basic'
        }
      },

      // üÜò EMERG√äNCIAS
      emergency: {
        'pane_estrada': {
          title: 'Pane na Estrada - Primeiros Socorros',
          content: `**EMERG√äNCIA: Pane na Estrada**

üö® **Procedimento de Seguran√ßa:**
1. **Pare em local seguro** (acostamento)
2. **Sinalize:** Tri√¢ngulo 30m atr√°s
3. **Pisca-alerta** ligado
4. **Saiam pela direita** (lado do acostamento)

üîß **Diagn√≥stico R√°pido:**

**MOTOR PAROU:**
‚Ä¢ Combust√≠vel ‚Üí Verificar n√≠vel
‚Ä¢ Superaquecimento ‚Üí N√£o abrir radiador quente
‚Ä¢ Bateria ‚Üí Testar com chave de fenda

**N√ÉO LIGA:**
‚Ä¢ Bateria fraca ‚Üí Aceitar ajuda para jump
‚Ä¢ Motor de arranque ‚Üí Bater levemente
‚Ä¢ Combust√≠vel ‚Üí Verificar se n√£o √© reserva

**PNEU FUROU:**
‚Ä¢ Trocar por estepe
‚Ä¢ Usar macaco no ponto correto
‚Ä¢ Apertar em cruz

üìû **Quando Chamar Socorro:**
‚Ä¢ Problemas el√©tricos complexos
‚Ä¢ Superaquecimento grave
‚Ä¢ Sem estepe ou macaco
‚Ä¢ Local perigoso

üõ°Ô∏è **Kit Emerg√™ncia:**
‚Ä¢ Tri√¢ngulo e lanterna
‚Ä¢ Macaco e chave de roda
‚Ä¢ Cabo para chupeta
‚Ä¢ Pneu estepe calibrado`,
          tags: ['emerg√™ncia', 'pane', 'seguran√ßa', 'estrada'],
          category: 'emergency',
          difficulty: 'basic',
          urgency: 'high'
        }
      },

      // üí∞ PRE√áOS E OR√áAMENTOS
      pricing: {
        'tabela_servicos': {
          title: 'Tabela de Pre√ßos - Servi√ßos Principais',
          content: `**TABELA DE PRE√áOS - 2024**

üîß **MANUTEN√á√ÉO B√ÅSICA:**
‚Ä¢ Troca de √≥leo: R$ 150-300
‚Ä¢ Filtros (ar/√≥leo/combust√≠vel): R$ 80-200
‚Ä¢ Velas de igni√ß√£o: R$ 120-350
‚Ä¢ Alinhamento/Balanceamento: R$ 120-180

‚öôÔ∏è **SISTEMA EL√âTRICO:**
‚Ä¢ Bateria 60Ah: R$ 350-500
‚Ä¢ Alternador (recondicionado): R$ 280-450
‚Ä¢ Motor de arranque: R$ 300-600
‚Ä¢ Diagn√≥stico el√©trico: R$ 80-150

üöó **SUSPENS√ÉO/FREIOS:**
‚Ä¢ Amortecedores (par): R$ 300-800
‚Ä¢ Pastilhas de freio: R$ 120-300
‚Ä¢ Discos de freio: R$ 200-500
‚Ä¢ Fluido de freio: R$ 60-100

üå°Ô∏è **ARREFECIMENTO:**
‚Ä¢ Radiador: R$ 400-800
‚Ä¢ Bomba d'√°gua: R$ 200-400
‚Ä¢ Termostato: R$ 80-150
‚Ä¢ Aditivo radiador: R$ 30-60

üí° **OBSERVA√á√ïES:**
‚Ä¢ Pre√ßos variam por regi√£o
‚Ä¢ Pe√ßas originais custam 20-40% mais
‚Ä¢ M√£o de obra: R$ 80-120/hora
‚Ä¢ Diagn√≥stico pode ser abatido do servi√ßo`,
          tags: ['pre√ßos', 'or√ßamento', 'tabela', 'custos'],
          category: 'pricing',
          last_updated: '2024-01-01'
        }
      },

      // ‚ùì FAQ GERAL
      general: {
        'quando_trocar_oleo': {
          title: 'Quando Trocar o √ìleo do Motor?',
          content: `**QUANDO TROCAR O √ìLEO?**

‚è∞ **Intervalos Recomendados:**

**√ìLEO MINERAL:**
‚Ä¢ Uso urbano: 5.000 km
‚Ä¢ Uso rodovi√°rio: 7.000 km
‚Ä¢ Condi√ß√µes severas: 3.000 km

**√ìLEO SEMISSINT√âTICO:**
‚Ä¢ Uso urbano: 7.500 km
‚Ä¢ Uso rodovi√°rio: 10.000 km
‚Ä¢ Condi√ß√µes severas: 5.000 km

**√ìLEO SINT√âTICO:**
‚Ä¢ Uso urbano: 10.000 km
‚Ä¢ Uso rodovi√°rio: 15.000 km
‚Ä¢ Condi√ß√µes severas: 7.500 km

üö® **Condi√ß√µes Severas:**
‚Ä¢ Tr√¢nsito intenso (para e anda)
‚Ä¢ Trajetos curtos frequentes
‚Ä¢ Clima muito quente ou frio
‚Ä¢ Estradas com muito p√≥
‚Ä¢ Reboque de cargas pesadas

üîç **Sinais de Troca:**
‚Ä¢ √ìleo escuro/espesso
‚Ä¢ Ru√≠do excessivo do motor
‚Ä¢ Fuma√ßa azul no escape
‚Ä¢ N√≠vel baixo frequente

üí° **Dica do Matias:**
"Melhor trocar antes do prazo que depois do estrago!"`,
          tags: ['√≥leo', 'manuten√ß√£o', 'intervalo', 'troca'],
          category: 'general',
          popularity: 'high'
        }
      }
    };

    // Carregar dados na base
    for (const [category, items] of Object.entries(knowledgeData)) {
      for (const [key, item] of Object.entries(items)) {
        this.knowledgeBase.set(`${category}_${key}`, {
          id: `${category}_${key}`,
          category,
          ...item,
          created_at: new Date(),
          accessed_count: 0
        });
      }
    }
  }

  /**
   * üîÑ Carregar conhecimento din√¢mico (banco de dados)
   */
  async loadDynamicKnowledge() {
    try {
      // Aqui carregar√≠amos dados do banco de dados
      // Por exemplo: procedimentos personalizados, hist√≥rico de solu√ß√µes, etc.
      
      // Simula√ß√£o de dados din√¢micos
      const dynamicKnowledge = [
        {
          id: 'custom_solution_001',
          title: 'Solu√ß√£o Para Problema Recorrente',
          content: 'Solu√ß√£o espec√≠fica baseada em caso real...',
          category: 'troubleshooting',
          source: 'database',
          confidence: 0.95
        }
      ];

      dynamicKnowledge.forEach(item => {
        this.knowledgeBase.set(item.id, item);
      });

    } catch (error) {
      console.warn('Erro ao carregar conhecimento din√¢mico:', error);
    }
  }

  /**
   * üìá Construir √≠ndice de busca
   */
  async buildSearchIndex() {
    for (const [id, item] of this.knowledgeBase) {
      // Indexar por palavras-chave
      const searchableText = [
        item.title,
        item.content,
        ...(item.tags || [])
      ].join(' ').toLowerCase();

      const words = searchableText.split(/\s+/)
        .filter(word => word.length > 2)
        .filter(word => !this.isStopWord(word));

      words.forEach(word => {
        if (!this.indexedData.has(word)) {
          this.indexedData.set(word, []);
        }
        this.indexedData.get(word).push({
          id,
          relevance: this.calculateWordRelevance(word, item)
        });
      });
    }
  }

  /**
   * üîç Buscar na base de conhecimento
   */
  async search(query, options = {}) {
    if (!this.initialized) {
      await this.initialize();
    }

    const {
      category = null,
      language = 'pt-BR',
      limit = 10,
      user_context = null
    } = options;

    try {
      // Normalizar query
      const normalizedQuery = query.toLowerCase()
        .replace(/[^\w\s]/g, ' ')
        .split(/\s+/)
        .filter(word => word.length > 2)
        .filter(word => !this.isStopWord(word));

      if (normalizedQuery.length === 0) {
        return [];
      }

      // Buscar matches
      const matches = new Map();

      normalizedQuery.forEach(word => {
        if (this.indexedData.has(word)) {
          this.indexedData.get(word).forEach(match => {
            if (!matches.has(match.id)) {
              matches.set(match.id, {
                id: match.id,
                score: 0,
                word_matches: []
              });
            }
            
            const current = matches.get(match.id);
            current.score += match.relevance;
            current.word_matches.push(word);
          });
        }
      });

      // Converter para array e ordenar por score
      let results = Array.from(matches.values())
        .map(match => {
          const item = this.knowledgeBase.get(match.id);
          return {
            ...item,
            search_score: match.score,
            word_matches: match.word_matches,
            confidence: this.calculateConfidence(match, normalizedQuery),
            relevance_factors: this.getRelevanceFactors(item, user_context)
          };
        })
        .sort((a, b) => b.search_score - a.search_score);

      // Filtrar por categoria se especificada
      if (category) {
        results = results.filter(item => item.category === category);
      }

      // Aplicar limite
      results = results.slice(0, limit);

      // Incrementar contador de acesso
      results.forEach(item => {
        const original = this.knowledgeBase.get(item.id);
        if (original) {
          original.accessed_count = (original.accessed_count || 0) + 1;
          original.last_accessed = new Date();
        }
      });

      return results;

    } catch (error) {
      console.error('Erro na busca da base de conhecimento:', error);
      return [];
    }
  }

  /**
   * üìä Obter estat√≠sticas da base
   */
  getStatistics() {
    const stats = {
      total_items: this.knowledgeBase.size,
      categories: {},
      most_accessed: [],
      recent_additions: []
    };

    // Contar por categoria
    for (const [id, item] of this.knowledgeBase) {
      const category = item.category || 'uncategorized';
      stats.categories[category] = (stats.categories[category] || 0) + 1;
    }

    // Itens mais acessados
    stats.most_accessed = Array.from(this.knowledgeBase.values())
      .sort((a, b) => (b.accessed_count || 0) - (a.accessed_count || 0))
      .slice(0, 10)
      .map(item => ({
        id: item.id,
        title: item.title,
        accessed_count: item.accessed_count || 0
      }));

    // Adi√ß√µes recentes
    stats.recent_additions = Array.from(this.knowledgeBase.values())
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
      .slice(0, 5)
      .map(item => ({
        id: item.id,
        title: item.title,
        created_at: item.created_at
      }));

    return stats;
  }

  /**
   * ‚ûï Adicionar novo conhecimento
   */
  async addKnowledge(knowledge) {
    const id = knowledge.id || `custom_${Date.now()}`;
    const item = {
      ...knowledge,
      id,
      created_at: new Date(),
      accessed_count: 0,
      source: 'user_added'
    };

    this.knowledgeBase.set(id, item);
    
    // Reindexar
    await this.reindexItem(item);
    
    return id;
  }

  /**
   * üîÑ Reindexar item espec√≠fico
   */
  async reindexItem(item) {
    const searchableText = [
      item.title,
      item.content,
      ...(item.tags || [])
    ].join(' ').toLowerCase();

    const words = searchableText.split(/\s+/)
      .filter(word => word.length > 2)
      .filter(word => !this.isStopWord(word));

    words.forEach(word => {
      if (!this.indexedData.has(word)) {
        this.indexedData.set(word, []);
      }
      
      // Remover entradas antigas deste item
      const wordIndex = this.indexedData.get(word);
      const filtered = wordIndex.filter(entry => entry.id !== item.id);
      
      // Adicionar nova entrada
      filtered.push({
        id: item.id,
        relevance: this.calculateWordRelevance(word, item)
      });
      
      this.indexedData.set(word, filtered);
    });
  }

  /**
   * üö´ Verificar stop words
   */
  isStopWord(word) {
    const stopWords = [
      'o', 'a', 'os', 'as', 'um', 'uma', 'uns', 'umas',
      'de', 'do', 'da', 'dos', 'das', 'em', 'no', 'na',
      'nos', 'nas', 'por', 'para', 'com', 'sem', 'sob',
      'sobre', 'entre', 'at√©', 'desde', 'que', 'se',
      'como', 'quando', 'onde', 'porque', 'muito',
      'mais', 'menos', 'bem', 'mal', 'todo', 'toda',
      'and', 'or', 'but', 'the', 'is', 'are', 'was',
      'were', 'be', 'been', 'have', 'has', 'had'
    ];
    return stopWords.includes(word);
  }

  /**
   * üìà Calcular relev√¢ncia da palavra
   */
  calculateWordRelevance(word, item) {
    let relevance = 1;

    // Palavra no t√≠tulo vale mais
    if (item.title && item.title.toLowerCase().includes(word)) {
      relevance += 2;
    }

    // Palavra nas tags vale mais
    if (item.tags && item.tags.some(tag => tag.toLowerCase().includes(word))) {
      relevance += 1.5;
    }

    // Categoria espec√≠fica vale mais
    if (item.category && item.category.toLowerCase().includes(word)) {
      relevance += 1;
    }

    // Items populares valem mais
    if (item.popularity === 'high') {
      relevance += 0.5;
    }

    return relevance;
  }

  /**
   * üéØ Calcular confian√ßa do resultado
   */
  calculateConfidence(match, originalQuery) {
    const matchRatio = match.word_matches.length / originalQuery.length;
    const scoreNormalized = Math.min(match.score / 10, 1);
    return (matchRatio * 0.6) + (scoreNormalized * 0.4);
  }

  /**
   * üîç Obter fatores de relev√¢ncia
   */
  getRelevanceFactors(item, userContext) {
    const factors = [];

    if (item.urgency === 'high') factors.push('Urgente');
    if (item.difficulty === 'basic') factors.push('F√°cil');
    if (item.popularity === 'high') factors.push('Popular');
    if (item.accessed_count > 10) factors.push('Frequente');

    if (userContext?.vehicle_brand && 
        item.content?.toLowerCase().includes(userContext.vehicle_brand.toLowerCase())) {
      factors.push('Espec√≠fico para sua marca');
    }

    return factors;
  }

  /**
   * üè∑Ô∏è Obter itens por categoria
   */
  async getByCategory(category, limit = 10) {
    const items = Array.from(this.knowledgeBase.values())
      .filter(item => item.category === category)
      .sort((a, b) => (b.accessed_count || 0) - (a.accessed_count || 0))
      .slice(0, limit);

    return items;
  }

  /**
   * üî• Obter itens populares
   */
  async getPopular(limit = 5) {
    return Array.from(this.knowledgeBase.values())
      .sort((a, b) => (b.accessed_count || 0) - (a.accessed_count || 0))
      .slice(0, limit);
  }

  /**
   * üÜï Obter itens recentes
   */
  async getRecent(limit = 5) {
    return Array.from(this.knowledgeBase.values())
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
      .slice(0, limit);
  }
}

const knowledgeBaseService = new KnowledgeBaseService();
export default knowledgeBaseService;
