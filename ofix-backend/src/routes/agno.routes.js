import express from 'express';
import fetch from 'node-fetch';
import FormData from 'form-data';
import jwt from 'jsonwebtoken';

// Importar servi√ßos do Matias
import ConversasService from '../services/conversas.service.js';
import AgendamentosService from '../services/agendamentos.service.js';
import ConsultasOSService from '../services/consultasOS.service.js';
import NLPService from '../services/nlp.service.js';
import prisma from '../config/database.js';

const router = express.Router();

// Configura√ß√µes do Agno (pode vir de vari√°veis de ambiente)
const AGNO_API_URL = process.env.AGNO_API_URL || 'http://localhost:8000';
const AGNO_API_TOKEN = process.env.AGNO_API_TOKEN || '';

// Registro de context e knowledge para o Agno
const AGNO_CONTEXT = {
    name: "OFIX - Sistema de Oficina Automotiva",
    description: "Assistente virtual Matias para oficina automotiva",
    capabilities: [
        "consultar_ordens_servico",
        "agendar_servicos", 
        "consultar_pecas",
        "calcular_orcamentos",
        "listar_clientes",
        "historico_veiculos",
        "estatisticas_oficina"
    ],
    endpoints: {
        base_url: process.env.BACKEND_URL || "http://localhost:3001",
        auth_required: true
    }
};

// Endpoint p√∫blico para verificar configura√ß√£o do Agno
router.get('/config', async (req, res) => {
    try {
        console.log('üîß Verificando configura√ß√£o do Agno...');
        
        res.json({
            configured: !!AGNO_API_URL && AGNO_API_URL !== 'http://localhost:8000',
            agno_url: AGNO_API_URL,
            has_token: !!AGNO_API_TOKEN,
            agent_id: process.env.AGNO_DEFAULT_AGENT_ID || 'oficinaia',
            timestamp: new Date().toISOString(),
            status: AGNO_API_URL === 'http://localhost:8000' ? 'development' : 'production'
        });
    } catch (error) {
        console.error('‚ùå Erro ao verificar configura√ß√£o:', error.message);
        res.status(500).json({
            error: 'Erro ao verificar configura√ß√£o',
            message: error.message
        });
    }
});

// Endpoint p√∫blico para testar chat SEM AUTENTICA√á√ÉO (tempor√°rio para debug)
router.post('/chat-public', async (req, res) => {
    try {
        const { message } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
        }

        console.log('üß™ Teste p√∫blico do chat - Configura√ß√£o:', {
            agno_url: AGNO_API_URL,
            configured: AGNO_API_URL !== 'http://localhost:8000',
            message: message.substring(0, 50) + '...'
        });

        // Se n√£o est√° configurado, retornar resposta de demonstra√ß√£o
        if (AGNO_API_URL === 'http://localhost:8000') {
            return res.json({
                success: true,
                response: `ü§ñ **Modo Demonstra√ß√£o Ativado**\n\nVoc√™ disse: "${message}"\n\nüìã **Status**: Agente Matias n√£o configurado no ambiente de produ√ß√£o.\n\n‚öôÔ∏è **Configura√ß√£o necess√°ria no Render:**\n- AGNO_API_URL=https://matias-agno-assistant.onrender.com\n- AGNO_DEFAULT_AGENT_ID=oficinaia\n\nüí° Ap√≥s configurar, o assistente conectar√° com seu agente real!`,
                mode: 'demo',
                agno_configured: false
            });
        }

        // Testar conex√£o com Agno real
        console.log('üîå Tentando conectar com Agno:', AGNO_API_URL);
        
        const formData = new FormData();
        formData.append('message', message);
        formData.append('stream', 'false');
        formData.append('user_id', 'test_user');

        try {
            const response = await fetch(`${AGNO_API_URL}/agents/oficinaia/runs`, {
                method: 'POST',
                headers: {
                    ...formData.getHeaders(),
                    ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
                },
                body: formData,
                timeout: 15000 // 15 segundos
            });

            if (response.ok) {
                const data = await response.json();
                const responseText = data.content || data.response || data.message || 'Resposta do agente Matias';
                
                console.log('‚úÖ Sucesso na comunica√ß√£o com Agno');
                res.json({
                    success: true,
                    response: responseText,
                    mode: 'production',
                    agno_configured: true,
                    metadata: data
                });
            } else {
                throw new Error(`Agno retornou status ${response.status}`);
            }
        } catch (agnoError) {
            console.error('‚ùå Erro ao conectar com Agno:', agnoError.message);
            
            // FALLBACK: Resposta inteligente baseada na mensagem
            let fallbackResponse;
            const msgLower = message.toLowerCase();
            
            if (msgLower.includes('servi√ßo') || msgLower.includes('problema') || msgLower.includes('carro')) {
                fallbackResponse = `üîß **Assistente OFIX**\n\nVoc√™ mencionou: "${message}"\n\n**Posso ajudar com:**\n‚Ä¢ Diagn√≥stico de problemas automotivos\n‚Ä¢ Informa√ß√µes sobre servi√ßos\n‚Ä¢ Consulta de pe√ßas\n‚Ä¢ Agendamento de manuten√ß√£o\n\n*‚ö†Ô∏è Agente Matias temporariamente indispon√≠vel. Respondendo em modo local.*`;
            } else if (msgLower.includes('pre√ßo') || msgLower.includes('valor') || msgLower.includes('custo')) {
                fallbackResponse = `üí∞ **Consulta de Pre√ßos**\n\nPara "${message}":\n\n**Servi√ßos populares:**\n‚Ä¢ Troca de √≥leo: R$ 80-120\n‚Ä¢ Revis√£o completa: R$ 200-400\n‚Ä¢ Diagn√≥stico: R$ 50-100\n\n*üí° Para valores exatos, consulte nossa equipe.*`;
            } else {
                fallbackResponse = `ü§ñ **OFIX Assistant**\n\nOl√°! Voc√™ disse: "${message}"\n\n**Como posso ajudar:**\n‚Ä¢ Problemas no ve√≠culo\n‚Ä¢ Informa√ß√µes sobre servi√ßos\n‚Ä¢ Consultas de pe√ßas\n‚Ä¢ Agendamentos\n\n*üîÑ Tentando reconectar com agente principal...*`;
            }
            
            res.json({
                success: true,
                response: fallbackResponse,
                mode: 'fallback',
                agno_configured: true,
                agno_error: agnoError.message
            });
        }
    } catch (mainError) {
        console.error('‚ùå Erro geral no teste p√∫blico:', mainError.message);
        res.status(500).json({
            error: 'Erro interno',
            message: mainError.message,
            agno_url: AGNO_API_URL
        });
    }
});

// ============================================================
// ü§ñ CHAT INTELIGENTE - PROCESSAMENTO DE LINGUAGEM NATURAL
// ============================================================

router.post('/chat-inteligente', async (req, res) => {
    try {
        const { message, usuario_id } = req.body;
        
        if (!message) {
            return res.status(400).json({ 
                success: false,
                error: 'Mensagem √© obrigat√≥ria' 
            });
        }

        console.log('üéØ Chat Inteligente - Mensagem:', message.substring(0, 80) + '...');
        
        // 1. DETECTAR INTEN√á√ÉO
        const intencao = NLPService.detectarIntencao(message);
        console.log('   Inten√ß√£o detectada:', intencao);
        
        // 2. PROCESSAR BASEADO NA INTEN√á√ÉO
        let response;
        
        switch (intencao) {
            case 'AGENDAMENTO':
                response = await processarAgendamento(message, usuario_id);
                break;
                
            case 'CONSULTA_OS':
                response = await processarConsultaOS(message);
                break;
                
            case 'CONSULTA_ESTOQUE':
                response = await processarConsultaEstoque(message);
                break;
                
            case 'ESTATISTICAS':
                response = await processarEstatisticas(message);
                break;
                
            case 'CONSULTA_CLIENTE':
                response = await processarConsultaCliente(message);
                break;
                
            case 'CADASTRAR_CLIENTE':
                response = await processarCadastroCliente(message, usuario_id);
                break;
                
            case 'AJUDA':
                response = {
                    success: true,
                    response: NLPService.gerarMensagemAjuda(),
                    tipo: 'ajuda'
                };
                break;
                
            default:
                // Conversa geral - pode enviar para Agno Agent se configurado
                response = await processarConversaGeral(message);
                break;
        }
        
        // 3. SALVAR CONVERSA NO HIST√ìRICO
        try {
            if (usuario_id) {
                await ConversasService.salvarConversa({
                    usuarioId: usuario_id,
                    pergunta: message,
                    resposta: response.response || 'Sem resposta',
                    contexto: JSON.stringify({ intencao, ...response.metadata }),
                    timestamp: new Date()
                });
            }
        } catch (saveError) {
            console.error('‚ö†Ô∏è Erro ao salvar conversa (n√£o cr√≠tico):', saveError.message);
        }
        
        // 4. RETORNAR RESPOSTA
        return res.json(response);
        
    } catch (error) {
        console.error('‚ùå Erro no chat inteligente:', error);
        return res.status(500).json({
            success: false,
            error: 'Erro ao processar mensagem',
            message: error.message
        });
    }
});

// ============================================================================
// üìÖ FUN√á√ÉO: PROCESSAR AGENDAMENTO
// ============================================================================

async function processarAgendamento(mensagem, usuario_id) {
    try {
        // 0. BUSCAR OFICINA DO USU√ÅRIO
        let oficinaId = null;
        if (usuario_id) {
            const usuario = await prisma.user.findUnique({
                where: { id: String(usuario_id) }, // USER ID √â STRING (UUID)
                select: { oficinaId: true }
            });
            oficinaId = usuario?.oficinaId;
            console.log('   üè¢ Oficina ID:', oficinaId);
        }
        
        // 1. EXTRAIR ENTIDADES
        const entidades = NLPService.extrairEntidadesAgendamento(mensagem);
        console.log('   üìã Entidades:', JSON.stringify(entidades, null, 2));
        
        // 2. VALIDAR DADOS NECESS√ÅRIOS
        const validacao = NLPService.validarDadosAgendamento(entidades);
        
        if (!validacao.valido) {
            // Mensagem personalizada baseada no que est√° faltando
            let mensagemAjuda = 'üìã **Vamos fazer seu agendamento!**\n\n';
            
            if (validacao.faltando.length === 4 || validacao.faltando.length === 5) {
                // Est√° faltando quase tudo - dar exemplo completo
                mensagemAjuda += 'üí° **Me informe os seguintes dados:**\n\n';
                mensagemAjuda += '‚Ä¢ **Cliente:** Nome do cliente\n';
                mensagemAjuda += '‚Ä¢ **Ve√≠culo:** Modelo ou placa\n';
                mensagemAjuda += '‚Ä¢ **Servi√ßo:** Tipo de manuten√ß√£o (revis√£o, troca de √≥leo, etc)\n';
                mensagemAjuda += '‚Ä¢ **Dia:** Dia da semana ou data (segunda, ter√ßa, 20/10)\n';
                mensagemAjuda += '‚Ä¢ **Hor√°rio:** Hora desejada (14h, 16:00)\n\n';
                mensagemAjuda += '**Exemplo:**\n';
                mensagemAjuda += '"Agendar revis√£o para o Gol do Jo√£o na segunda √†s 14h"';
            } else {
                // Est√° faltando apenas alguns dados - ser espec√≠fico
                mensagemAjuda += '**Informa√ß√µes que ainda preciso:**\n\n';
                mensagemAjuda += validacao.faltando.map((item, i) => `${i + 1}. ${item}`).join('\n');
                mensagemAjuda += '\n\n**Exemplo:**\n';
                
                // Gerar exemplo baseado no que j√° tem
                const partes = [];
                if (entidades.servico) partes.push(entidades.servico);
                else partes.push('revis√£o');
                
                if (entidades.veiculo) partes.push(`para o ${entidades.veiculo}`);
                else if (entidades.cliente) partes.push(`para o cliente ${entidades.cliente}`);
                else partes.push('para o Gol do Jo√£o');
                
                if (entidades.diaSemana || entidades.dataEspecifica) {
                    partes.push(entidades.diaTexto || new Date(entidades.dataEspecifica).toLocaleDateString('pt-BR'));
                } else {
                    partes.push('na segunda');
                }
                
                if (entidades.hora) partes.push(`√†s ${entidades.hora}`);
                else partes.push('√†s 14h');
                
                mensagemAjuda += `"${partes.join(' ')}"`;
            }
            
            return {
                success: false,
                response: mensagemAjuda,
                tipo: 'pergunta',
                faltando: validacao.faltando,
                entidades_detectadas: entidades
            };
        }
        
        // 3. BUSCAR CLIENTE NO BANCO (com busca inteligente)
        let cliente = null;
        let clientesSugeridos = [];
        
        if (entidades.cliente) {
            // Busca exata primeiro (FILTRADO POR OFICINA)
            const whereClause = {
                nomeCompleto: {
                    contains: entidades.cliente,
                    mode: 'insensitive'
                }
            };
            
            // Adicionar filtro de oficina se dispon√≠vel
            if (oficinaId) {
                whereClause.oficinaId = oficinaId; // CAMPO √â oficinaId (camelCase)
            }
            
            cliente = await prisma.cliente.findFirst({
                where: whereClause,
                include: {
                    veiculos: true
                }
            });
            
            // Se n√£o encontrou, buscar clientes similares para sugest√£o (FILTRADO POR OFICINA)
            if (!cliente) {
                const palavrasBusca = entidades.cliente.split(' ').filter(p => p.length > 2);
                
                if (palavrasBusca.length > 0) {
                    const whereSugestoes = {
                        OR: palavrasBusca.map(palavra => ({
                            nomeCompleto: {
                                contains: palavra,
                                mode: 'insensitive'
                            }
                        }))
                    };
                    
                    // Adicionar filtro de oficina
                    if (oficinaId) {
                        whereSugestoes.oficinaId = oficinaId; // CAMPO √â oficinaId (camelCase)
                    }
                    
                    clientesSugeridos = await prisma.cliente.findMany({
                        where: whereSugestoes,
                        include: {
                            veiculos: true
                        },
                        take: 5
                    });
                }
            }
        } else if (entidades.placa) {
            const veiculo = await prisma.veiculo.findFirst({
                where: {
                    placa: entidades.placa
                },
                include: {
                    cliente: {
                        include: {
                            veiculos: true
                        }
                    }
                }
            });
            cliente = veiculo?.cliente;
        }
        
        // Se n√£o encontrou cliente, mostrar sugest√µes ou listar todos
        if (!cliente) {
            if (clientesSugeridos.length > 0) {
                return {
                    success: false,
                    response: `üîç **Cliente "${entidades.cliente}" n√£o encontrado**\n\n**Clientes similares encontrados:**\n${clientesSugeridos.map((c, i) => `${i + 1}. ${c.nomeCompleto}${c.telefone ? ` - ${c.telefone}` : ''}${c.veiculos.length > 0 ? `\n   üöó ${c.veiculos.map(v => `${v.marca} ${v.modelo}`).join(', ')}` : ''}`).join('\n\n')}\n\nüí° **Digite o n√∫mero ou nome completo do cliente correto**`,
                    tipo: 'sugestao',
                    sugestoes: clientesSugeridos
                };
            }
            
            // Se n√£o tem sugest√µes, listar alguns clientes recentes (FILTRADO POR OFICINA)
            const whereClientesRecentes = oficinaId ? { oficinaId } : {};
            
            const clientesRecentes = await prisma.cliente.findMany({
                where: whereClientesRecentes,
                include: {
                    veiculos: true
                },
                orderBy: {
                    createdAt: 'desc'
                },
                take: 5
            });
            
            console.log('   üìã Clientes recentes encontrados:', clientesRecentes.length);
            console.log('   üè¢ Filtrado por oficinaId:', oficinaId || 'SEM FILTRO');
            
            if (clientesRecentes.length > 0) {
                return {
                    success: false,
                    response: `‚ùå **Cliente n√£o encontrado**\n\n${entidades.cliente ? `N√£o encontrei "${entidades.cliente}" no sistema.` : 'Nenhum cliente especificado.'}\n\n**Clientes recentes cadastrados:**\n${clientesRecentes.map((c, i) => `${i + 1}. ${c.nomeCompleto}${c.veiculos.length > 0 ? `\n   üöó ${c.veiculos.map(v => `${v.marca} ${v.modelo}`).join(', ')}` : ''}`).join('\n\n')}\n\nüí° **Op√ß√µes:**\n‚Ä¢ Digite o nome completo do cliente\n‚Ä¢ Ou cadastre um novo cliente primeiro`,
                    tipo: 'erro',
                    clientes_disponiveis: clientesRecentes
                };
            }
            
            return {
                success: false,
                response: `‚ùå **Nenhum cliente cadastrado**\n\n${entidades.cliente ? `N√£o encontrei "${entidades.cliente}".` : ''}\n\nüí° **√â necess√°rio cadastrar o cliente primeiro:**\n1. Acesse "Clientes" no menu\n2. Clique em "Novo Cliente"\n3. Preencha os dados\n4. Depois volte aqui para agendar`,
                tipo: 'erro'
            };
        }
        
        // 4. BUSCAR VE√çCULO (com busca inteligente)
        let veiculo = null;
        
        if (entidades.placa) {
            // Busca por placa (mais precisa)
            veiculo = cliente.veiculos.find(v => v.placa === entidades.placa);
        } else if (entidades.veiculo) {
            // Busca por modelo (pode ter m√∫ltiplos)
            const veiculosEncontrados = cliente.veiculos.filter(v => 
                v.modelo.toLowerCase().includes(entidades.veiculo.toLowerCase()) ||
                v.marca.toLowerCase().includes(entidades.veiculo.toLowerCase())
            );
            
            if (veiculosEncontrados.length === 1) {
                veiculo = veiculosEncontrados[0];
            } else if (veiculosEncontrados.length > 1) {
                return {
                    success: false,
                    response: `üöó **M√∫ltiplos ve√≠culos "${entidades.veiculo}" encontrados**\n\n**Cliente:** ${cliente.nomeCompleto}\n\n**Escolha o ve√≠culo:**\n${veiculosEncontrados.map((v, i) => `${i + 1}. ${v.marca} ${v.modelo} ${v.anoModelo || ''} - ${v.placa}${v.cor ? ` (${v.cor})` : ''}`).join('\n')}\n\nüí° Digite o n√∫mero ou especifique a placa (ex: "ABC-1234")`,
                    tipo: 'multiplos',
                    opcoes: veiculosEncontrados
                };
            }
        }
        
        // Se n√£o encontrou e o cliente tem ve√≠culos, listar para escolha
        if (!veiculo && cliente.veiculos.length > 0) {
            // Se tem apenas 1 ve√≠culo, usar automaticamente
            if (cliente.veiculos.length === 1) {
                veiculo = cliente.veiculos[0];
                console.log(`   ‚úÖ √önico ve√≠culo do cliente selecionado automaticamente: ${veiculo.marca} ${veiculo.modelo}`);
            } else {
                return {
                    success: false,
                    response: `üöó **${entidades.veiculo ? `Ve√≠culo "${entidades.veiculo}" n√£o encontrado` : 'Qual ve√≠culo deseja agendar?'}**\n\n**Cliente:** ${cliente.nomeCompleto}\n\n**Ve√≠culos dispon√≠veis:**\n${cliente.veiculos.map((v, i) => `${i + 1}. ${v.marca} ${v.modelo}${v.anoModelo ? ` ${v.anoModelo}` : ''} - ${v.placa}${v.cor ? ` (${v.cor})` : ''}`).join('\n')}\n\nüí° Digite o n√∫mero, modelo ou placa do ve√≠culo`,
                    tipo: 'pergunta',
                    opcoes: cliente.veiculos
                };
            }
        }
        
        if (!veiculo) {
            return {
                success: false,
                response: `‚ùå **Nenhum ve√≠culo cadastrado**\n\n**Cliente:** ${cliente.nomeCompleto}\n\nüí° **√â necess√°rio cadastrar um ve√≠culo primeiro:**\n1. Acesse "Clientes" no menu\n2. Selecione "${cliente.nomeCompleto}"\n3. Adicione um ve√≠culo\n4. Depois volte aqui para agendar`,
                tipo: 'erro',
                cliente_id: cliente.id
            };
        }
        
        // 5. CALCULAR DATA E HORA
        let dataAgendamento;
        
        if (entidades.dataEspecifica) {
            dataAgendamento = entidades.dataEspecifica;
        } else if (entidades.diaSemana) {
            dataAgendamento = NLPService.calcularProximaData(entidades.diaSemana);
        } else {
            return {
                success: false,
                response: 'üìÖ **Qual dia deseja agendar?**\n\nExemplos: "segunda", "ter√ßa", "20/10"',
                tipo: 'pergunta'
            };
        }
        
        const dataHora = new Date(`${dataAgendamento}T${entidades.hora}:00`);
        
        // Validar se a data n√£o est√° no passado
        if (dataHora < new Date()) {
            return {
                success: false,
                response: `‚ùå **Data inv√°lida**\n\nA data ${NLPService.formatarDataAmigavel(dataAgendamento)} √†s ${entidades.hora} j√° passou.\n\nüí° Escolha uma data futura.`,
                tipo: 'erro'
            };
        }
        
        // 6. VERIFICAR DISPONIBILIDADE
        const conflito = await prisma.agendamento.findFirst({
            where: {
                dataHora: dataHora,
                status: {
                    not: 'CANCELADO'
                }
            },
            include: {
                cliente: true
            }
        });
        
        if (conflito) {
            return {
                success: false,
                response: `‚è∞ **Hor√°rio ocupado**\n\n${NLPService.formatarDataAmigavel(dataAgendamento)} √†s ${entidades.hora} j√° est√° reservado para ${conflito.cliente.nomeCompleto}.\n\n**Hor√°rios dispon√≠veis no mesmo dia:**\n‚Ä¢ 08:00\n‚Ä¢ 10:00\n‚Ä¢ 14:00\n‚Ä¢ 16:00\n\nüí° Qual hor√°rio prefere?`,
                tipo: 'conflito',
                horarios_disponiveis: ['08:00', '10:00', '14:00', '16:00']
            };
        }
        
        // 7. CRIAR AGENDAMENTO! ‚úÖ
        const agendamento = await AgendamentosService.criarAgendamento({
            clienteId: cliente.id,
            veiculoId: veiculo.id,
            tipoServico: entidades.servico || 'Servi√ßo Geral',
            dataHora: dataHora,
            descricao: `Agendamento via IA: ${mensagem}`,
            status: 'AGENDADO'
        });
        
        // 8. CONFIRMAR COM DETALHES
        const dataFormatada = NLPService.formatarDataAmigavel(dataAgendamento);
        
        return {
            success: true,
            response: `‚úÖ **Agendamento Confirmado!**\n\nüìã **Protocolo:** #${agendamento.id}\n\nüë§ **Cliente:** ${cliente.nomeCompleto}\nüìû **Telefone:** ${cliente.telefone || 'N√£o cadastrado'}\n\nüöó **Ve√≠culo:** ${veiculo.marca} ${veiculo.modelo}\nüîñ **Placa:** ${veiculo.placa}${veiculo.cor ? `\nüé® **Cor:** ${veiculo.cor}` : ''}\n\nüìÖ **Data:** ${dataFormatada}\n‚è∞ **Hor√°rio:** ${entidades.hora}\nüîß **Servi√ßo:** ${entidades.servico || 'Servi√ßo Geral'}\n\n${entidades.urgente ? 'üö® **Urgente** - Priorizado\n\n' : ''}üí¨ ${cliente.nomeCompleto.split(' ')[0]} receber√° confirma√ß√£o por WhatsApp.`,
            tipo: 'confirmacao',
            agendamento_id: agendamento.id,
            metadata: {
                cliente_id: cliente.id,
                veiculo_id: veiculo.id,
                data: dataAgendamento,
                hora: entidades.hora
            }
        };
        
    } catch (error) {
        console.error('‚ùå Erro em processarAgendamento:', error);
        return {
            success: false,
            response: `‚ùå **Erro ao processar agendamento**\n\n${error.message}\n\nüí° Por favor, tente novamente ou contate o suporte.`,
            tipo: 'erro'
        };
    }
}

// ============================================================================
// üîç FUN√á√ÉO: PROCESSAR CONSULTA OS
// ============================================================================

async function processarConsultaOS(mensagem) {
    try {
        const dados = NLPService.extrairDadosConsultaOS(mensagem);
        console.log('   üîç Dados para consulta OS:', dados);
        
        const where = {};
        
        if (dados.numeroOS) {
            where.id = dados.numeroOS;
        }
        
        if (dados.placa) {
            where.veiculo = {
                placa: dados.placa
            };
        }
        
        if (dados.cliente) {
            where.cliente = {
                nomeCompleto: {
                    contains: dados.cliente,
                    mode: 'insensitive'
                }
            };
        }
        
        if (dados.status) {
            where.status = dados.status;
        }
        
        const ordensServico = await prisma.ordemServico.findMany({
            where,
            include: {
                cliente: true,
                veiculo: true
            },
            orderBy: {
                dataAbertura: 'desc'
            },
            take: 10
        });
        
        if (ordensServico.length === 0) {
            return {
                success: false,
                response: 'üîç **Nenhuma ordem de servi√ßo encontrada**\n\nüí° Verifique os dados e tente novamente.',
                tipo: 'vazio'
            };
        }
        
        const lista = ordensServico.map((os, i) => 
            `${i + 1}. **OS #${os.id}** - ${os.cliente.nomeCompleto}\n   üöó ${os.veiculo.marca} ${os.veiculo.modelo} (${os.veiculo.placa})\n   üìä Status: ${os.status}\n   üìÖ Abertura: ${new Date(os.dataAbertura).toLocaleDateString('pt-BR')}`
        ).join('\n\n');
        
        return {
            success: true,
            response: `üîç **Ordens de Servi√ßo Encontradas** (${ordensServico.length})\n\n${lista}`,
            tipo: 'lista',
            total: ordensServico.length,
            ordensServico
        };
        
    } catch (error) {
        console.error('‚ùå Erro em processarConsultaOS:', error);
        return {
            success: false,
            response: '‚ùå Erro ao consultar ordens de servi√ßo',
            tipo: 'erro'
        };
    }
}

// ============================================================================
// üì¶ FUN√á√ÉO: PROCESSAR CONSULTA ESTOQUE
// ============================================================================

async function processarConsultaEstoque(mensagem) {
    try {
        // Implementar l√≥gica de consulta de estoque
        return {
            success: true,
            response: 'üì¶ **Consulta de Estoque**\n\nFuncionalidade em desenvolvimento.',
            tipo: 'info'
        };
    } catch (error) {
        return {
            success: false,
            response: '‚ùå Erro ao consultar estoque',
            tipo: 'erro'
        };
    }
}

// ============================================================================
// üìä FUN√á√ÉO: PROCESSAR ESTAT√çSTICAS
// ============================================================================

async function processarEstatisticas(mensagem) {
    try {
        const stats = await ConsultasOSService.obterResumoOfficina('hoje');
        
        return {
            success: true,
            response: `üìä **Estat√≠sticas de Hoje**\n\n‚Ä¢ **Ordens de Servi√ßo:** ${stats.total_os || 0}\n‚Ä¢ **Agendamentos:** ${stats.agendamentos || 0}\n‚Ä¢ **Clientes Atendidos:** ${stats.clientes || 0}\n‚Ä¢ **Receita:** R$ ${(stats.receita || 0).toFixed(2)}`,
            tipo: 'estatisticas',
            stats
        };
    } catch (error) {
        console.error('‚ùå Erro em processarEstatisticas:', error);
        return {
            success: false,
            response: '‚ùå Erro ao buscar estat√≠sticas',
            tipo: 'erro'
        };
    }
}

// ============================================================================
// üë§ FUN√á√ÉO: PROCESSAR CONSULTA CLIENTE
// ============================================================================

async function processarConsultaCliente(mensagem) {
    try {
        // Implementar l√≥gica de consulta de cliente
        return {
            success: true,
            response: 'üë§ **Consulta de Clientes**\n\nFuncionalidade em desenvolvimento.',
            tipo: 'info'
        };
    } catch (error) {
        return {
            success: false,
            response: '‚ùå Erro ao consultar cliente',
            tipo: 'erro'
        };
    }
}

// ============================================================================
// üí¨ FUN√á√ÉO: PROCESSAR CONVERSA GERAL
// ============================================================================

async function processarConversaGeral(mensagem) {
    // Se Agno estiver configurado, enviar para l√°
    // Sen√£o, resposta gen√©rica
    return {
        success: true,
        response: 'ü§ñ **Assistente Matias**\n\nComo posso ajudar?\n\nüí° Digite "ajuda" para ver o que posso fazer.',
        tipo: 'conversa'
    };
}

// ============================================================================
// üë§ FUN√á√ÉO: PROCESSAR CADASTRO DE CLIENTE
// ============================================================================

async function processarCadastroCliente(mensagem, usuario_id) {
    try {
        // Buscar oficinaId do usu√°rio
        let oficinaId = null;
        if (usuario_id) {
            const usuario = await prisma.user.findUnique({
                where: { id: String(usuario_id) },
                select: { oficinaId: true }
            });
            oficinaId = usuario?.oficinaId;
        }
        
        if (!oficinaId) {
            return {
                success: false,
                response: '‚ùå **Erro:** N√£o foi poss√≠vel identificar sua oficina.',
                tipo: 'erro'
            };
        }
        
        // Extrair dados do cliente da mensagem
        const dados = NLPService.extrairDadosCliente(mensagem);
        
        console.log('   üìã Dados extra√≠dos:', dados);
        
        // Verificar se tem dados suficientes
        if (!dados.nome || dados.nome.length < 3) {
            return {
                success: false,
                response: `üìù **Para cadastrar um novo cliente, preciso dos seguintes dados:**

‚Ä¢ **Nome completo**
‚Ä¢ Telefone (opcional)
‚Ä¢ CPF/CNPJ (opcional)
‚Ä¢ Email (opcional)

**Exemplo:**
"Nome: Jo√£o Silva, Tel: (85) 99999-9999, CPF: 123.456.789-00"

**Ou informe apenas o nome para cadastro r√°pido:**
"Cadastrar cliente Jo√£o Silva"`,
                tipo: 'pergunta'
            };
        }
        
        // Verificar se cliente j√° existe
        const clienteExistente = await prisma.cliente.findFirst({
            where: {
                nomeCompleto: {
                    equals: dados.nome,
                    mode: 'insensitive'
                },
                oficinaId
            }
        });
        
        if (clienteExistente) {
            return {
                success: false,
                response: `‚ö†Ô∏è **Cliente j√° cadastrado!**

**Nome:** ${clienteExistente.nomeCompleto}
**Telefone:** ${clienteExistente.telefone || 'N√£o informado'}
**CPF/CNPJ:** ${clienteExistente.cpfCnpj || 'N√£o informado'}

üí° Deseja fazer um agendamento para este cliente?`,
                tipo: 'alerta',
                cliente: clienteExistente
            };
        }
        
        // Criar novo cliente
        const novoCliente = await prisma.cliente.create({
            data: {
                nomeCompleto: dados.nome,
                telefone: dados.telefone || null,
                cpfCnpj: dados.cpfCnpj || null,
                email: dados.email || null,
                oficinaId
            }
        });
        
        return {
            success: true,
            response: `‚úÖ **Cliente cadastrado com sucesso!**

**Nome:** ${novoCliente.nomeCompleto}
${dados.telefone ? `**Telefone:** ${dados.telefone}` : ''}
${dados.cpfCnpj ? `**CPF/CNPJ:** ${dados.cpfCnpj}` : ''}
${dados.email ? `**Email:** ${dados.email}` : ''}

üí° **Pr√≥ximos passos:**
‚Ä¢ Fazer agendamento para este cliente
‚Ä¢ Cadastrar ve√≠culo do cliente
‚Ä¢ Adicionar mais informa√ß√µes`,
            tipo: 'sucesso',
            cliente: novoCliente
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao cadastrar cliente:', error);
        return {
            success: false,
            response: '‚ùå **Erro ao cadastrar cliente**\n\nPor favor, tente novamente ou cadastre manualmente na tela de clientes.',
            tipo: 'erro'
        };
    }
}

// ============================================================
// ENDPOINTS PARA INTEGRA√á√ÉO COM AGNO - FUNCIONALIDADES MATIAS
// ============================================================

// Endpoint para o Agno consultar Ordens de Servi√ßo
router.post('/consultar-os', async (req, res) => {
    try {
        const { veiculo, proprietario, status, periodo } = req.body;
        
        console.log('üîç Agno consultando OS:', { veiculo, proprietario, status, periodo });
        
        const resultados = await ConsultasOSService.consultarOS({
            veiculo,
            proprietario, 
            status,
            periodo
        });
        
        res.json({
            success: true,
            total: resultados.length,
            ordens_servico: resultados,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro na consulta OS:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao consultar ordens de servi√ßo',
            message: error.message
        });
    }
});

// Endpoint para o Agno agendar servi√ßos
router.post('/agendar-servico', async (req, res) => {
    try {
        const { cliente, veiculo, servico, data_hora, descricao } = req.body;
        
        console.log('üìÖ Agno agendando servi√ßo:', { cliente, veiculo, servico, data_hora });
        
        const agendamento = await AgendamentosService.criarAgendamento({
            clienteId: cliente.id,
            veiculoId: veiculo.id,
            tipoServico: servico,
            dataHora: new Date(data_hora),
            descricao,
            status: 'AGENDADO'
        });
        
        res.json({
            success: true,
            agendamento,
            mensagem: `Servi√ßo ${servico} agendado para ${new Date(data_hora).toLocaleString('pt-BR')}`,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro no agendamento:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao agendar servi√ßo',
            message: error.message
        });
    }
});

// Endpoint para o Agno consultar estat√≠sticas
router.get('/estatisticas', async (req, res) => {
    try {
        const { periodo = '30_dias' } = req.query;
        
        console.log('üìä Agno consultando estat√≠sticas:', { periodo });
        
        const stats = await ConsultasOSService.obterEstatisticas(periodo);
        
        res.json({
            success: true,
            periodo,
            estatisticas: stats,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro nas estat√≠sticas:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao consultar estat√≠sticas',
            message: error.message
        });
    }
});

// Endpoint para o Agno salvar conversas
router.post('/salvar-conversa', async (req, res) => {
    try {
        const { usuario_id, mensagem, resposta, contexto } = req.body;
        
        console.log('üíæ Agno salvando conversa:', { usuario_id, mensagem: mensagem?.substring(0, 50) });
        
        const conversa = await ConversasService.salvarConversa({
            usuarioId: usuario_id,
            pergunta: mensagem,
            resposta,
            contexto: JSON.stringify(contexto || {}),
            timestamp: new Date()
        });
        
        res.json({
            success: true,
            conversa_id: conversa.id,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar conversa:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao salvar conversa',
            message: error.message
        });
    }
});

// Endpoint para o Agno recuperar hist√≥rico de conversas
router.get('/historico-conversas/:usuario_id', async (req, res) => {
    try {
        const { usuario_id } = req.params;
        const { limite = 10 } = req.query;
        
        console.log('üìö Agno recuperando hist√≥rico:', { usuario_id, limite });
        
        const historico = await ConversasService.obterHistorico(usuario_id, parseInt(limite));
        
        res.json({
            success: true,
            usuario_id,
            total: historico.length,
            conversas: historico,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro no hist√≥rico:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao recuperar hist√≥rico',
            message: error.message
        });
    }
});

// Endpoint para fornecer contexto do sistema ao Agno
router.get('/contexto-sistema', async (req, res) => {
    try {
        const contexto = {
            sistema: "OFIX - Sistema de Oficina Automotiva",
            versao: "2024.1",
            assistente: "Matias",
            capacidades: [
                "Consultar ordens de servi√ßo por ve√≠culo, propriet√°rio ou status",
                "Agendar novos servi√ßos com data e hora espec√≠ficas", 
                "Calcular or√ßamentos baseados em pe√ßas e m√£o de obra",
                "Consultar hist√≥rico completo de ve√≠culos",
                "Gerar relat√≥rios de produtividade da oficina",
                "Buscar pe√ßas no estoque com pre√ßos atualizados",
                "Acompanhar status de servi√ßos em andamento"
            ],
            funcoes_disponivel: {
                "consultar_os": "/agno/consultar-os",
                "agendar_servico": "/agno/agendar-servico", 
                "obter_estatisticas": "/agno/estatisticas",
                "salvar_conversa": "/agno/salvar-conversa",
                "historico": "/agno/historico-conversas/:usuario_id"
            },
            exemplos_uso: {
                consulta_os: "Mostrar todas as ordens de servi√ßo do Gol 2020 prata",
                agendamento: "Agendar revis√£o para o Civic do Jo√£o na pr√≥xima segunda √†s 14h",
                estatisticas: "Quantos carros atendemos este m√™s?"
            },
            timestamp: new Date().toISOString()
        };
        
        res.json({
            success: true,
            contexto
        });
        
    } catch (error) {
        console.error('‚ùå Erro no contexto:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao obter contexto do sistema'
        });
    }
});

// Middleware para verificar autentica√ß√£o
const verificarAuth = (req, res, next) => {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
        return res.status(401).json({ error: 'Token de autentica√ß√£o necess√°rio' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        return res.status(401).json({ error: 'Token inv√°lido' });
    }
};

// Health check do agente Agno
router.get('/health', verificarAuth, async (req, res) => {
    try {
        console.log('üîç Verificando status do agente Agno...');
        
        const response = await fetch(`${AGNO_API_URL}/health`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            },
            timeout: 5000
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Agente Agno online:', data);
            
            res.json({
                status: 'online',
                agno_status: data,
                timestamp: new Date().toISOString()
            });
        } else {
            console.log('‚ö†Ô∏è Agente Agno retornou erro:', response.status);
            res.status(response.status).json({
                status: 'erro',
                message: 'Agente n√£o dispon√≠vel',
                agno_status: response.status
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao conectar com agente Agno:', error.message);
        res.status(503).json({
            status: 'erro',
            message: 'Servi√ßo temporariamente indispon√≠vel',
            error: error.message
        });
    }
});

// Listar agentes dispon√≠veis
router.get('/agents', verificarAuth, async (req, res) => {
    try {
        console.log('üìã Listando agentes dispon√≠veis...');
        
        const response = await fetch(`${AGNO_API_URL}/agents`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            }
        });

        if (response.ok) {
            const data = await response.json();
            console.log('üìã Agentes encontrados:', data.length);
            
            res.json({
                success: true,
                agents: data,
                count: data.length
            });
        } else {
            const errorData = await response.text();
            console.error('‚ùå Erro ao listar agentes:', response.status, errorData);
            res.status(response.status).json({
                error: 'Erro ao listar agentes',
                details: errorData
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao conectar para listar agentes:', error.message);
        res.status(500).json({
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Chat com o agente Agno
router.post('/chat', verificarAuth, async (req, res) => {
    try {
        const { message, agent_id, session_id } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
        }

        // Verificar se temos user_id v√°lido
        const userId = req.user?.id || req.user?.userId || 'anonymous';
        const agentId = agent_id || 'oficinaia'; // Usar oficinaia por padr√£o, mas permitir override
        
        console.log('üí¨ Enviando mensagem para agente Agno:', {
            user: req.user.email,
            user_id: userId,
            agent_id: agentId,
            session_id: session_id,
            message: message.substring(0, 100) + '...'
        });

        // Preparar FormData para multipart/form-data
        const formData = new FormData();
        formData.append('message', message);
        formData.append('stream', 'false');
        formData.append('user_id', userId);
        
        // Adicionar session_id para manter contexto (opcional)
        if (session_id) {
            formData.append('session_id', session_id);
        }

        const response = await fetch(`${AGNO_API_URL}/agents/${agentId}/runs`, {
            method: 'POST',
            headers: {
                ...formData.getHeaders(),
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            },
            body: formData,
            timeout: 30000 // 30 segundos timeout
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Resposta recebida do agente Agno:', JSON.stringify(data, null, 2));
            
            // Extrair o conte√∫do da resposta de forma segura
            let responseText = '';
            
            if (typeof data === 'string') {
                responseText = data;
            } else if (data.content) {
                responseText = data.content;
            } else if (data.response) {
                responseText = data.response;
            } else if (data.message) {
                responseText = data.message;
            } else if (data.output) {
                responseText = data.output;
            } else {
                responseText = 'Resposta recebida do agente (formato n√£o reconhecido)';
            }
            
            res.json({
                success: true,
                response: responseText,
                session_id: data.session_id, // Retornar session_id para o frontend
                metadata: {
                    agent_id: agentId,
                    run_id: data.run_id,
                    session_id: data.session_id,
                    model: data.model || data.model_provider,
                    tokens_used: data.tokens_used || data.metrics?.total_tokens,
                    timestamp: new Date().toISOString()
                }
            });
        } else {
            const errorData = await response.text();
            console.error('‚ùå Erro na resposta do agente Agno:', response.status, errorData);
            
            let suggestion = null;
            if (response.status === 404) {
                suggestion = 'Agente n√£o encontrado. Use GET /api/agno/agents para listar agentes dispon√≠veis.';
            }
            
            res.status(response.status).json({
                error: 'Erro no processamento da mensagem',
                details: errorData,
                agno_status: response.status,
                suggestion: suggestion
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao comunicar com agente Agno:', error.message);
        res.status(500).json({
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para testar com par√¢metros espec√≠ficos (debug)
router.post('/chat-debug', verificarAuth, async (req, res) => {
    try {
        const { message, agent_id, session_id, custom_params } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
        }

        const userId = req.user?.id || req.user?.userId || 'anonymous';
        const agentId = agent_id || 'oficinaia';
        
        console.log('üîç Debug - Testando com par√¢metros personalizados:', {
            user: req.user.email,
            agent_id: agentId,
            session_id: session_id,
            custom_params: custom_params,
            message: message
        });

        // Preparar FormData com par√¢metros customiz√°veis
        const formData = new FormData();
        formData.append('message', message);
        formData.append('stream', 'false');
        formData.append('user_id', userId);
        
        if (session_id) {
            formData.append('session_id', session_id);
        }
        
        // Adicionar par√¢metros customizados se fornecidos
        if (custom_params) {
            Object.keys(custom_params).forEach(key => {
                formData.append(key, custom_params[key]);
            });
        }

        const response = await fetch(`${AGNO_API_URL}/agents/${agentId}/runs`, {
            method: 'POST',
            headers: {
                ...formData.getHeaders(),
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            },
            body: formData,
            timeout: 30000
        });

        if (response.ok) {
            const data = await response.json();
            console.log('üîç Debug - Resposta completa:', JSON.stringify(data, null, 2));
            
            res.json({
                success: true,
                debug: true,
                full_response: data, // Retornar resposta completa para an√°lise
                extracted_response: data.content || data.response || data.message,
                session_id: data.session_id,
                metadata: {
                    agent_id: agentId,
                    run_id: data.run_id,
                    session_id: data.session_id,
                    model: data.model || data.model_provider,
                    tokens_used: data.tokens_used || data.metrics?.total_tokens
                }
            });
        } else {
            const errorData = await response.text();
            res.status(response.status).json({
                error: 'Erro no debug',
                details: errorData
            });
        }
    } catch (error) {
        console.error('‚ùå Erro no debug:', error.message);
        res.status(500).json({
            error: 'Erro interno no debug',
            message: error.message
        });
    }
});

// Rota para testar com mensagens mais diretas (sem user_id que pode confundir)
router.post('/chat-direct', verificarAuth, async (req, res) => {
    try {
        const { message, agent_id } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
        }

        const agentId = agent_id || 'oficinaia';
        
        console.log('üéØ Teste direto - sem user_id espec√≠fico:', {
            agent_id: agentId,
            message: message
        });

        // FormData mais simples, sem user_id espec√≠fico
        const formData = new FormData();
        formData.append('message', message);
        formData.append('stream', 'false');
        // N√£o enviar user_id espec√≠fico para ver se melhora

        const response = await fetch(`${AGNO_API_URL}/agents/${agentId}/runs`, {
            method: 'POST',
            headers: {
                ...formData.getHeaders(),
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            },
            body: formData,
            timeout: 30000
        });

        if (response.ok) {
            const data = await response.json();
            console.log('üéØ Resposta do teste direto:', JSON.stringify(data, null, 2));
            
            const responseText = data.content || data.response || data.message || 'Sem resposta';
            
            res.json({
                success: true,
                response: responseText,
                session_id: data.session_id,
                test_mode: 'direct',
                metadata: {
                    agent_id: agentId,
                    run_id: data.run_id,
                    session_id: data.session_id,
                    model: data.model || data.model_provider,
                    tools_used: data.tools ? data.tools.length : 0,
                    tokens_used: data.tokens_used || data.metrics?.total_tokens
                }
            });
        } else {
            const errorData = await response.text();
            res.status(response.status).json({
                error: 'Erro no teste direto',
                details: errorData
            });
        }
    } catch (error) {
        console.error('‚ùå Erro no teste direto:', error.message);
        res.status(500).json({
            error: 'Erro interno no teste direto',
            message: error.message
        });
    }
});

// Nova rota com instru√ß√µes RIGOROSAS para usar APENAS dados encontrados
router.post('/chat-strict', verificarAuth, async (req, res) => {
    try {
        const { message, session_id } = req.body;
        const agentId = 'oficinaia';
        
        console.log('üéØ Chat-strict iniciado - instru√ß√µes rigorosas');
        console.log('üìù Mensagem original:', message);
        
        // Instru√ß√µes ULTRA RIGOROSAS para for√ßar uso de dados espec√≠ficos
        const enhancedMessage = `INSTRU√á√ïES CR√çTICAS - LEIA COM ATEN√á√ÉO TOTAL:

1. Voc√™ DEVE usar EXCLUSIVAMENTE os dados encontrados nas suas pesquisas da base de conhecimento
2. Se encontrar dados espec√≠ficos (pre√ßos, valores, informa√ß√µes), use EXATAMENTE esses dados
3. JAMAIS invente, estime ou use conhecimento geral quando tiver dados espec√≠ficos
4. Se pesquisar e encontrar "R$ 120,00" para troca de √≥leo, responda EXATAMENTE "R$ 120,00"
5. TOTALMENTE PROIBIDO usar ranges como "R$ 50-150" ou "em m√©dia R$ 80" quando tiver valor espec√≠fico
6. Se n√£o encontrar dados espec√≠ficos na base, diga claramente "N√£o encontrei essa informa√ß√£o espec√≠fica na base de conhecimento"
7. Use SOMENTE o que est√° documentado nos resultados das suas pesquisas
8. IGNORE completamente conhecimento geral se tiver dados espec√≠ficos encontrados

PERGUNTA DO USU√ÅRIO: ${message}

LEMBRE-SE: DADOS ENCONTRADOS = RESPOSTA EXATA. NUNCA substitua dados espec√≠ficos por estimativas!`;

        console.log('üîß Mensagem com instru√ß√µes rigorosas preparada');

        const formData = new FormData();
        formData.append('message', enhancedMessage);
        formData.append('stream', 'false');
        formData.append('user_id', req.user?.id || req.user?.userId || 'ofix_user');
        
        if (session_id) {
            formData.append('session_id', session_id);
        }

        const response = await fetch(`${AGNO_API_URL}/agents/${agentId}/runs`, {
            method: 'POST',
            headers: {
                ...formData.getHeaders(),
                ...(AGNO_API_TOKEN && { 'Authorization': `Bearer ${AGNO_API_TOKEN}` })
            },
            body: formData,
            timeout: 30000
        });

        if (response.ok) {
            const data = await response.json();
            console.log('üéØ Resposta chat-strict:', JSON.stringify(data, null, 2));
            
            const responseText = data.content || data.response || data.message || 'Sem resposta';
            
            res.json({
                success: true,
                response: responseText,
                session_id: data.session_id,
                mode: 'strict-instructions',
                metadata: {
                    agent_id: agentId,
                    run_id: data.run_id,
                    session_id: data.session_id,
                    model: data.model || data.model_provider,
                    tools_used: data.tools ? data.tools.length : 0,
                    tokens_used: data.tokens_used || data.metrics?.total_tokens,
                    timestamp: new Date().toISOString()
                }
            });
        } else {
            const errorData = await response.text();
            console.error('‚ùå Erro no chat-strict:', response.status, errorData);
            res.status(response.status).json({
                error: 'Erro no chat com instru√ß√µes rigorosas',
                details: errorData
            });
        }
    } catch (error) {
        console.error('‚ùå Erro no chat-strict:', error.message);
        res.status(500).json({
            error: 'Erro interno no chat-strict',
            message: error.message
        });
    }
});

export default router;